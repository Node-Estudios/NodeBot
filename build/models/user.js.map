{"version":3,"file":"user.js","sourceRoot":"","sources":["../../src/models/user.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,UAAU,CAAA;AAClD,OAAO,OAAO,MAAM,qBAAqB,CAAA;AAgBzC,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC;IACtB,OAAO,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC1C,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;CACzB,CAAC,CAAA;AAYF,MAAM,SAAS,GAAG,IAAI,MAAM,CAAC;IACzB,OAAO,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC1C,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;CACzB,CAAC,CAAA;AAQF,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC;IAErB,SAAS;IAET,MAAM;CAKT,CAAC,CAAA;AAkHF,MAAM,WAAW,GAAG,IAAI,MAAM,CAAC;IAC3B,YAAY,EAAE,MAAM;IACpB,aAAa,EAAE,MAAM;IACrB,OAAO,EAAE,MAAM;CAClB,CAAC,CAAA;AACF,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,yBAA0B,CAAA;AACrD,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,yBAA0B,CAAA;AACrD,eAAe,KAAK,CAChB,OAAO,EACP,IAAI,QAAQ,CAAC,MAAM,CACf;IACI,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IAEpC,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;IACtB,gBAAgB,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;IAClC,MAAM,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE;IACzB,KAAK,EAAE,KAAK;IACZ,WAAW,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,QAAQ,EAAE,KAAK,EAAE;CAEtD,EACD,EAAE,UAAU,EAAE,OAAO,EAAE,CAC1B,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,aAAa,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,eAAe,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,CACrG,CAAA","sourcesContent":["import mongoose, { Schema, model } from 'mongoose'\nimport encrypt from 'mongoose-encryption'\n// const Premium = new Schema({\n//   Enabled: { type: Boolean, required: true },\n//   Date: { type: String },\n// });\n\n// const EarlyPremium = new Schema({\n//   Enabled: { type: Boolean, required: true },\n//   Date: { type: String },\n// });\n\n// const Support = new Schema({\n//   Enabled: { type: Boolean, required: true },\n//   Date: { type: String },\n// });\n\nconst Tester = new Schema({\n    enabled: { type: Boolean, required: true },\n    date: { type: String },\n})\n\n// const Booster = new Schema({\n//   Enabled: { type: Boolean, required: true },\n//   Date: { type: String },\n// });\n\n// const Notifications = new Schema({\n//   Enabled: { type: Boolean, required: true },\n//   Date: { type: String },\n// });\n\nconst Developer = new Schema({\n    enabled: { type: Boolean, required: true },\n    date: { type: String },\n})\n\n// const Event25k = new Schema({\n//     CODE: { type: String, required: true },\n//     SERVERS: { type: String },\n//     USERS: { type: String },\n// })\n\nconst Roles = new Schema({\n    //   Premium: Premium,\n    Developer,\n    //   EarlyPremium: EarlyPremium,\n    Tester,\n    //   Notifications: Notifications,\n    //   Booster: Booster,\n    //   Support: Support,\n    //   Event25k: Event25k\n})\n\n// const Enviadas = new Schema({\n//   bite: { type: Number },\n//   blush: { type: Number },\n//   bonk: { type: Number },\n//   bored: { type: Number },\n//   bully: { type: Number },\n//   bye: { type: Number },\n//   chase: { type: Number },\n//   cringe: { type: Number },\n//   cry: { type: Number },\n//   cuddle: { type: Number },\n//   dab: { type: Number },\n//   dance: { type: Number },\n//   die: { type: Number },\n//   facepalm: { type: Number },\n//   feed: { type: Number },\n//   glomp: { type: Number },\n//   hi: { type: Number },\n//   highfive: { type: Number },\n//   happy: { type: Number },\n//   hug: { type: Number },\n//   kill: { type: Number },\n//   kiss: { type: Number },\n//   laugh: { type: Number },\n//   lick: { type: Number },\n//   love: { type: Number },\n//   lurk: { type: Number },\n//   nervous: { type: Number },\n//   nope: { type: Number },\n//   pampering: { type: Number },\n//   panic: { type: Number },\n//   pat: { type: Number },\n//   peck: { type: Number },\n//   pout: { type: Number },\n//   run: { type: Number },\n//   sad: { type: Number },\n//   shoot: { type: Number },\n//   shrug: { type: Number },\n//   slap: { type: Number },\n//   sleep: { type: Number },\n//   stare: { type: Number },\n//   tease: { type: Number },\n//   think: { type: Number },\n//   thumbsup: { type: Number },\n//   tickle: { type: Number },\n//   triggered: { type: Number },\n//   wag: { type: Number },\n//   wave: { type: Number },\n//   wink: { type: Number },\n//   yes: { type: Number },\n// });\n\n// const Recibidas = new Schema({\n//   bite: { type: Number },\n//   blush: { type: Number },\n//   bonk: { type: Number },\n//   bored: { type: Number },\n//   bully: { type: Number },\n//   bye: { type: Number },\n//   chase: { type: Number },\n//   cringe: { type: Number },\n//   cry: { type: Number },\n//   cuddle: { type: Number },\n//   dab: { type: Number },\n//   dance: { type: Number },\n//   die: { type: Number },\n//   facepalm: { type: Number },\n//   feed: { type: Number },\n//   glomp: { type: Number },\n//   hi: { type: Number },\n//   highfive: { type: Number },\n//   happy: { type: Number },\n//   hug: { type: Number },\n//   kill: { type: Number },\n//   kiss: { type: Number },\n//   laugh: { type: Number },\n//   lick: { type: Number },\n//   love: { type: Number },\n//   lurk: { type: Number },\n//   nervous: { type: Number },\n//   nope: { type: Number },\n//   pampering: { type: Number },\n//   panic: { type: Number },\n//   pat: { type: Number },\n//   peck: { type: Number },\n//   pout: { type: Number },\n//   run: { type: Number },\n//   sad: { type: Number },\n//   shoot: { type: Number },\n//   shrug: { type: Number },\n//   slap: { type: Number },\n//   sleep: { type: Number },\n//   stare: { type: Number },\n//   tease: { type: Number },\n//   think: { type: Number },\n//   thumbsup: { type: Number },\n//   tickle: { type: Number },\n//   triggered: { type: Number },\n//   wag: { type: Number },\n//   wave: { type: Number },\n//   wink: { type: Number },\n//   yes: { type: Number },\n// });\n\n// const Interacciones = new Schema({\n//   Enviadas: Enviadas,\n//   Recibidas: Recibidas,\n// });\n\n// const Eventos = new Schema({\n//   Event25k: Event25k\n// })\nconst Credentials = new Schema({\n    access_token: String,\n    refresh_token: String,\n    expires: String,\n})\nconst encKey = process.env.SOME_32BYTE_BASE64_STRING!\nconst sigKey = process.env.SOME_64BYTE_BASE64_STRING!\nexport default model(\n    'Users',\n    new mongoose.Schema(\n        {\n            id: { type: String, required: true },\n            // LANG SHOULD BE A STRING, FOR EXAMPLE \"ES\" OR \"EN\"\n            lang: { type: String },\n            executedCommands: { type: Number },\n            banned: { type: Boolean },\n            roles: Roles,\n            credentials: { type: Credentials, required: false },\n            // Interacciones: Interacciones,\n        },\n        { collection: 'Users' },\n    ).plugin(encrypt, { encryptionKey: encKey, signingKey: sigKey, encryptedFields: ['credentials'] }),\n)\n\ninterface Developer {\n    enabled: boolean\n    date?: string\n}\ninterface Tester {\n    enabled: boolean\n    date?: string\n}\ninterface Roles {\n    Developer: Developer\n    Tester: Tester\n}\ninterface Credentials2 {\n    access_token: String\n    refresh_token: String\n    expires: String\n}\nexport interface User {\n    id: string\n    executedCommands: number\n    banned?: boolean\n    roles: Roles\n    credentials?: Credentials2\n}\n"]}