{"version":3,"file":"user.js","sourceRoot":"","sources":["../../src/models/user.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,EAAE,EAAE,MAAM,EAAE,KAAK,EAAS,MAAM,UAAU,CAAA;AACzD,OAAO,OAAO,MAAM,qBAAqB,CAAA;AAGzC,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAA;AACpD,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAA;AAGpD,IAAI,CAAC,MAAM;IACP,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAA;AACnG,IAAI,CAAC,MAAM;IACP,MAAM,IAAI,KAAK,CAAC,2EAA2E,CAAC,CAAA;AAKhG,MAAM,YAAY,GAAG,IAAI,MAAM,CAAC;IAC5B,OAAO,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC1C,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;CACzB,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAA;AAGlB,MAAM,eAAe,GAAG,IAAI,MAAM,CAAC;IAC/B,OAAO,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC1C,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;CACzB,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAA;AAElB,MAAM,WAAW,GAAG,IAAI,MAAM,CAAC;IAC3B,SAAS,EAAE,eAAe;IAC1B,MAAM,EAAE,YAAY;CACvB,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAA;AAElB,MAAM,iBAAiB,GAAG,IAAI,MAAM,CAAC;IACjC,YAAY,EAAE,MAAM;IACpB,aAAa,EAAE,MAAM;IACrB,OAAO,EAAE,MAAM;CAClB,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAA;AAGlB,MAAM,UAAU,GAAG,IAAI,QAAQ,CAAC,MAAM,CAClC;IACI,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE;IAClD,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE;IACxC,gBAAgB,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,EAAE;IAC9D,MAAM,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE;IACzC,KAAK,EAAE,WAAW;IAClB,WAAW,EAAE,EAAE,IAAI,EAAE,iBAAiB,EAAE,QAAQ,EAAE,KAAK,EAAE;CAC5D,EACD,EAAE,UAAU,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,CAC5C,CAAC,MAAM,CAAC,OAAO,EAAE;IACd,aAAa,EAAE,MAAM;IACrB,UAAU,EAAE,MAAM;IAClB,eAAe,EAAE,CAAC,aAAa,CAAC;CACnC,CAAC,CAAA;AA0CF,eAAe,KAAK,CAAO,OAAO,EAAE,UAAU,CAAC,CAAA","sourcesContent":["import mongoose, { Schema, model, Types } from 'mongoose' // Added Types import\nimport encrypt from 'mongoose-encryption'\n\n// Define required environment variables and check them\nconst encKey = process.env.SOME_32BYTE_BASE64_STRING\nconst sigKey = process.env.SOME_64BYTE_BASE64_STRING\n\n// Removed braces for single-statement 'if' blocks\nif (!encKey)\n    throw new Error('Missing encryption key (SOME_32BYTE_BASE64_STRING) in environment variables!')\nif (!sigKey)\n    throw new Error('Missing signing key (SOME_64BYTE_BASE64_STRING) in environment variables!')\n\n// --- Sub-schema definitions ---\n// Disabled warnings for schema constants used only within RolesSchema definition\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst TesterSchema = new Schema({\n    enabled: { type: Boolean, required: true },\n    date: { type: String }, // Consider using Date type: { type: Date }\n}, { _id: false })\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst DeveloperSchema = new Schema({\n    enabled: { type: Boolean, required: true },\n    date: { type: String }, // Consider using Date type: { type: Date }\n}, { _id: false })\n\nconst RolesSchema = new Schema({\n    Developer: DeveloperSchema,\n    Tester: TesterSchema,\n}, { _id: false }) // Remove trailing comma here if ESLint flagged line 26\n\nconst CredentialsSchema = new Schema({\n    access_token: String,\n    refresh_token: String,\n    expires: String, // Consider using Date type: { type: Date }\n}, { _id: false }) // Remove trailing comma here if ESLint flagged line 31\n\n// --- Main Schema Definition ---\nconst UserSchema = new mongoose.Schema(\n    {\n        id: { type: String, required: true, unique: true },\n        lang: { type: String, default: 'en-US' },\n        executedCommands: { type: Number, required: true, default: 0 },\n        banned: { type: Boolean, default: false },\n        roles: RolesSchema,\n        credentials: { type: CredentialsSchema, required: false },\n    },\n    { collection: 'Users', timestamps: true },\n).plugin(encrypt, {\n    encryptionKey: encKey,\n    signingKey: sigKey,\n    encryptedFields: ['credentials'],\n})\n\n// --- TypeScript Interfaces ---\n// Filled in empty interfaces\ninterface IDeveloper {\n    enabled: boolean\n    date?: string\n}\ninterface ITester {\n    enabled: boolean\n    date?: string\n}\ninterface IRoles {\n    Developer?: IDeveloper\n    Tester?: ITester\n}\ninterface ICredentials {\n    access_token?: string\n    refresh_token?: string\n    expires?: string\n}\n\n// Base data structure interface (no changes needed here)\nexport interface IUserBase {\n    id: string\n    lang?: string\n    executedCommands: number\n    banned?: boolean\n    roles?: IRoles\n    credentials?: ICredentials\n}\n\n// Mongoose Document Interface - Fixed TS2320\n// Now only includes IUserBase and optional Mongoose fields. Doesn't extend Document directly.\nexport interface User extends IUserBase {\n    _id?: Types.ObjectId // Optional _id field from Mongoose\n    createdAt?: Date\n    updatedAt?: Date\n}\n\n// --- Model Export ---\n// Model is typed with the User interface. Mongoose handles Document properties internally.\nexport default model<User>('Users', UserSchema) // Remove trailing comma here if ESLint flagged it\n"]}