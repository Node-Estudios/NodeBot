{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/restAPI/twitch/index.ts"],"names":[],"mappings":"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","sourcesContent":["import express, { Router as router, Request } from 'express'\nimport NodeManager from '#structures/NodeManager.js'\nimport TwitchModel from '#models/twitch.js'\nimport { LocaleString, REST, Routes } from 'discord.js'\nimport Translator, { keys } from '#utils/Translator.js'\n\nconst rest = new REST().setToken(process.env.TOKEN)\n\nexport default class Twitch {\n    manager: NodeManager\n    router = router()\n    // app: Express.Application\n    constructor (manager: NodeManager) {\n        this.manager = manager\n        this.#load()\n    }\n\n    #load () {\n        this.router.use(express.json())\n\n        this.router.post('/webhook', express.raw({ type: 'application/json' }), async (req: Request<{}, {}, WebhookCallbackVerificationEvent | NotificationEvent>, res) => {\n            const type = req.headers.webhook_callback_verification ?? ''\n            if (type === 'webhook_callback_verification') {\n                const body = req.body as WebhookCallbackVerificationEvent\n                return res.status(200).send(body.challenge)\n            }\n            if (type === 'revocation') {\n                // TODO: handle this\n                return res.status(200).send('ok')\n            }\n            if (type !== 'notification') {\n                return res.status(200).send('ok')\n            }\n\n            res.status(200).send('ok')\n            const body = req.body as NotificationEvent\n            const subs = await TwitchModel.find({\n                streamerId: body.event.broadcaster_user_id,\n            })\n\n            for (const sub of subs) {\n                const translate = Translator(await this.getGuildLang(sub.guildId))\n                await rest.post(Routes.channelMessages(sub.channelId), {\n                    body: {\n                        content: `${sub.roleId ? `<@&${sub.roleId}> ` : ''}${translate(keys.twitch.now_live, {\n                            streamer: body.event.broadcaster_user_name,\n                        })}`,\n                    },\n                })\n            }\n            return undefined\n        })\n        return this.router\n    }\n\n    async getGuildLang (guildId: string) {\n        const guild = await rest.get(Routes.guild(guildId)) as { preferred_locale: LocaleString }\n        return guild?.preferred_locale ?? 'en-US'\n    }\n}\n\nexport interface WebhookCallbackVerificationEvent {\n    challenge: string\n    subscription: Subscription\n}\n\nexport interface Subscription {\n    id: string\n    status: string\n    type: string\n    version: string\n    cost: number\n    condition: Condition\n    transport: Transport\n    created_at: string\n}\n\nexport interface Condition {\n    broadcaster_user_id: string\n}\n\nexport interface NotificationEvent {\n    subscription: Subscription\n    event: Event\n}\n\nexport interface Transport {\n    method: string\n    callback: string\n}\n\nexport interface Event {\n    user_id: string\n    user_login: string\n    user_name: string\n    broadcaster_user_id: string\n    broadcaster_user_login: string\n    broadcaster_user_name: string\n    followed_at: string\n}\n"]}