{"version":3,"file":"EmbedBuilder.js","sourceRoot":"","sources":["../../src/structures/EmbedBuilder.ts"],"names":[],"mappings":"AAAA,OAAO,EAAiB,YAAY,IAAI,gBAAgB,EAAe,cAAc,EAAE,MAAM,YAAY,CAAA;AAEzG,MAAM,CAAC,OAAO,OAAO,YAAa,SAAQ,gBAAgB;IAC7C,SAAS,CAAE,GAAG,MAAkC;QACrD,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC,CAAA;QAC/B,MAAM,YAAY,GAAoB,EAAE,CAAA;QACxC,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YACzB,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,IAAI;gBAAE,SAAQ;YAEzC,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG;gBACvB,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAA;YAEjD,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI;gBACzB,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,KAAK,CAAA;YACpD,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAC5B,CAAC;QACD,OAAO,KAAK,CAAC,SAAS,CAAC,YAAY,CAAC,CAAA;IACxC,CAAC;IAEQ,SAAS,CAAE,GAAG,MAAkC;QACrD,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC,CAAA;QAC/B,MAAM,YAAY,GAAoB,EAAE,CAAA;QACxC,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YACzB,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,IAAI;gBAAE,SAAQ;YAEzC,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG;gBACvB,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAA;YAEjD,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI;gBACzB,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,KAAK,CAAA;YACpD,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAC5B,CAAC;QACD,OAAO,KAAK,CAAC,SAAS,CAAC,YAAY,CAAC,CAAA;IACxC,CAAC;IAEQ,cAAc,CAAE,WAA0B;QAC/C,IAAI,CAAC,WAAW;YAAE,OAAO,IAAI,CAAA;QAC7B,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,GAAG,IAAI;YACxC,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,KAAK,CAAA;QACpD,OAAO,KAAK,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;IAC5C,CAAC;IAEQ,QAAQ,CAAE,KAAoB;QACnC,IAAI,CAAC,KAAK;YAAE,OAAO,IAAI,CAAA;QACvB,IAAI,KAAK,CAAC,MAAM,GAAG,GAAG;YAClB,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAA;QACvC,OAAO,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;IAChC,CAAC;CACJ","sourcesContent":["import { APIEmbedField, EmbedBuilder as EmbedBuilderBase, RestOrArray, normalizeArray } from 'discord.js'\n\nexport default class EmbedBuilder extends EmbedBuilderBase {\n    override setFields (...fields: RestOrArray<APIEmbedField>): this {\n        fields = normalizeArray(fields)\n        const parsedFields: APIEmbedField[] = []\n        for (const field of fields) {\n            if (!field.value || !field.name) continue\n\n            if (field.name.length > 256)\n                field.name = field.name.slice(0, 253) + '...'\n\n            if (field.value.length > 1024)\n                field.value = field.value.slice(0, 1020) + '...'\n            parsedFields.push(field)\n        }\n        return super.setFields(parsedFields)\n    }\n\n    override addFields (...fields: RestOrArray<APIEmbedField>): this {\n        fields = normalizeArray(fields)\n        const parsedFields: APIEmbedField[] = []\n        for (const field of fields) {\n            if (!field.value || !field.name) continue\n\n            if (field.name.length > 256)\n                field.name = field.name.slice(0, 253) + '...'\n\n            if (field.value.length > 1024)\n                field.value = field.value.slice(0, 1020) + '...'\n            parsedFields.push(field)\n        }\n        return super.setFields(parsedFields)\n    }\n\n    override setDescription (description: string | null): this {\n        if (!description) return this\n        if (description && description.length > 4096)\n            description = description.slice(0, 4092) + '...'\n        return super.setDescription(description)\n    }\n\n    override setTitle (title: string | null): this {\n        if (!title) return this\n        if (title.length > 256)\n            title = title.slice(0, 253) + '...'\n        return super.setTitle(title)\n    }\n}\n"]}