{"version":3,"file":"spamInterval.js","sourceRoot":"","sources":["../../src/structures/spamInterval.ts"],"names":[],"mappings":"AAAA,MAAM,OAAO,cAAc;IAEN,WAAW,CAAqB;IAEjD;QAEI,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,EAAE,CAAA;IAChC,CAAC;IAGM,OAAO,CAAE,IAAY,EAAE,GAAW;QAErC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QAGtB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,CAAC,CAAA;QAGrC,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAA;IACxD,CAAC;IAGM,SAAS,CAAE,IAAY;QAE1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QAGtB,MAAM,mBAAmB,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QAGtD,IAAI,CAAC,mBAAmB,IAAI,mBAAmB,GAAG,GAAG,EAAE;YACnD,OAAO,KAAK,CAAA;SACf;QAGD,OAAO,IAAI,CAAA;IACf,CAAC;CACJ","sourcesContent":["export class SpamIntervalDB {\n    // Creamos una propiedad privada `_timestamps` que será una instancia de Map\n    private readonly _timestamps: Map<string, number>\n\n    constructor () {\n        // Inicializamos la propiedad `_timestamps` como una instancia de Map\n        this._timestamps = new Map()\n    }\n\n    // Método para agregar un usuario a la base de datos\n    public addUser (user: string, ttl: number): void {\n        // Obtenemos la hora actual en milisegundos\n        const now = Date.now()\n\n        // Agregamos el usuario y su hora de expiración (hora actual + ttl en milisegundos) a la base de datos\n        this._timestamps.set(user, now + ttl)\n\n        // Programamos la eliminación del usuario después de que haya transcurrido el tiempo de vida especificado\n        setTimeout(() => this._timestamps.delete(user), ttl)\n    }\n\n    // Método para verificar si un usuario está presente en la base de datos\n    public checkUser (user: string): boolean {\n        // Obtenemos la hora actual en milisegundos\n        const now = Date.now()\n\n        // Obtenemos la hora de expiración del usuario\n        const expirationTimestamp = this._timestamps.get(user)\n\n        // Si el usuario no está presente en la base de datos o su tiempo de vida ha expirado, devolvemos false\n        if (!expirationTimestamp || expirationTimestamp < now) {\n            return false\n        }\n\n        // Si el usuario está presente y su tiempo de vida no ha expirado, devolvemos true\n        return true\n    }\n}\n"]}