{"version":3,"file":"NodeManager.js","sourceRoot":"","sources":["../../src/structures/NodeManager.ts"],"names":[],"mappings":"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","sourcesContent":["//  @ts-nocheck\nimport { Cluster, ClusterManager, fetchRecommendedShards } from 'discord-hybrid-sharding'\nimport { Collection } from 'discord.js'\nimport pkg from 'figlet'\nimport { ShardingClient } from 'statcord.js'\nimport Logger from '../utils/logger.js'\nconst { textSync } = pkg\n\nexport default class NodeManager extends ClusterManager {\n    public commands: any\n    public clustersArray: Collection<any, any>\n    public players: Collection<any, any>\n    public statcord: ShardingClient | undefined\n    public logger = Logger\n\n    constructor () {\n        super('build/bot.js', {\n            totalClusters: 1,\n            totalShards: 1,\n            mode: 'worker',\n            queue: {\n                auto: false,\n            },\n        })\n\n        this.logger.startUp(\n            'Iniciando Sistema De Node' +\n            '\\n' +\n            textSync('Node Bot', {\n                font: 'Ghost',\n                horizontalLayout: 'default',\n                verticalLayout: 'default',\n                width: 80,\n                whitespaceBreak: true,\n            }),\n        )\n\n        // Función para dividir los shards en bloques\n        const chunk = (arr: any[], size: any): any[] =>\n            Array.from({ length: Math.ceil(arr.length / size) }, (v, i) => arr.slice(i * size, i * size + size))\n        this.clustersArray = new Collection<string, any[]>()\n        this.players = new Collection<string, any[]>()\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        let clusterList: any[]\n        if (!process.env.TOKEN) throw new Error('No pudimos encontrar tu token, asegurate de añadirlo al .env con el nombre de TOKEN!')\n\n        // Inicializa las colecciones para los clusters de diferentes nodos\n        this.clustersArray.set('node', [])\n        this.clustersArray.set('customBots', [])\n        this.clustersArray.set('node2', [])\n        this.clustersArray.set('node3', [])\n        this.clustersArray.set('node4', [])\n\n        fetchRecommendedShards(process.env.TOKEN)\n            .then((data: number) => {\n                // * Crea una lista de shards\n                const shardList = [...Array(data).keys()]\n\n                // * Divide los shards en bloques\n                clusterList = chunk(shardList, 2)\n\n                this.queue.queue.shift()\n                this.totalClusters = 0\n\n                for (let i = this.clusterList.length; i < clusterList.length; i++) {\n                    this.totalClusters = (this.totalClusters) + 1\n\n                    const datos: any = {\n                        /**\n                         * @param {string} botType - Type of the bot\n                         * * botType: {\n                         * *  1 - Bot Principal\n                         * *  2 - Bot de Node 2 / 3 / 4 (opcionales de música)\n                         * *  3 - Bot Custom de un usuario que ha comprado la función\n                         * * }\n                         *\n                         * */\n                        botType: 1,\n                        typeData: {\n                            botNumber: 1,\n\n                        },\n                    }\n\n                    const cluster = this.createCluster(i, clusterList[i], data);\n\n                    (this.clustersArray.get('node') as any[]).push({\n                        id: cluster.id,\n                        shardsArray: clusterList[i],\n                    })\n\n                    this.queue.add({\n                        run: async () => {\n                            const cluster = this.clusters.get(i)\n                            await cluster?.spawn(1000000, process.env.TOKEN, datos)\n                            return await this.queue.next()\n                        },\n                        args: [],\n                        timeout: 10000,\n                    })\n                }\n\n                // Uncomment and modify the following lines to add more clusters\n                // Node 2\n                if (process.env.TOKEN_NODE_2) this.createNodeCluster(2, process.env.TOKEN_NODE_2)\n                // Node 3\n                if (process.env.TOKEN_NODE_3) this.createNodeCluster(3, process.env.TOKEN_NODE_3)\n                // Node 4\n                if (process.env.TOKEN_NODE_4) this.createNodeCluster(4, process.env.TOKEN_NODE_4)\n            })\n            .then(() => {\n                this.queue.start()\n                this.queue.next()\n            })\n\n        this.on('debug', (message: any) => {\n            this.logger.debug(message)\n        })\n\n        this.on('clusterCreate', (cluster: Cluster) => {\n            this.logger.startUp(`Launched cluster ${cluster.id}`)\n        })\n    }\n\n    createNodeCluster (nodeNumber: number, token: string) {\n        const chunk = (arr: any[], size: any): any[] =>\n            Array.from({ length: Math.ceil(arr.length / size) }, (v, i) => arr.slice(i * size, i * size + size))\n        let color\n        switch (nodeNumber) {\n            case 2:\n                color = 'Purple'\n                break\n            case 3:\n                color = 'Orange'\n                break\n            case 4:\n                color = 'Aqua'\n                break\n        }\n\n        const datos = {\n            botType: 2,\n            typeData: {\n                botNumber: nodeNumber,\n                color,\n            },\n        }\n\n        fetchRecommendedShards(token)\n            .then((data: number) => {\n                let shardList = [...Array(data).keys()]\n                if (data === 1) shardList = [0]\n                // * Divide los shards en bloques\n                const clusterList = chunk(shardList, 2)\n\n                for (let i = 0; i < clusterList.length; i++) {\n                    const clusterIndex = this.totalClusters + 1\n                    this.totalClusters = clusterIndex\n                    const cluster = this.createCluster(clusterIndex, clusterList[i], data);\n\n                    (this.clustersArray.get(`node${nodeNumber}`) as any[]).push({\n                        id: cluster.id,\n                        shardsArray: clusterList[i],\n                    })\n\n                    this.queue.add({\n                        run: async () => {\n                            const cluster = this.clusters.get(clusterIndex)\n                            await cluster?.spawn(1000000, token, datos)\n                            return await this.queue.next()\n                        },\n                        args: [],\n                        timeout: 10000,\n                    })\n                }\n            })\n            .catch((err: any) => console.log(err))\n    }\n}\n"]}