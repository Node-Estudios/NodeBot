{"version":3,"file":"restAPIHandler.js","sourceRoot":"","sources":["../../src/structures/restAPIHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import cors from 'cors'\nimport express from 'express'\nimport logger from '#utils/logger.js'\nimport Manager from './NodeManager.js'\n\n// funcione logger:\n// Logger.log, Logger.error, Logger.warn, Logger.info, Logger.debug\n\nexport default function (manager: Manager) {\n    const app = express()\n    app.use(cors())\n    // Definimos las variables necesarias en el oncstructor para la rest API\n\n    let result: any[] = []\n    app.get('/statistics', async (req: express.Request, res: express.Response) => {\n        res.json(result)\n    })\n\n    // Iniciamos el servidor en el puerto 3000\n    app.listen(3000, () => {\n        logger.log('Server listening on port 3000')\n    })\n    /*\n            & My function for get data from clusters, it only took me 4 hours ._.\n            ? Example output:\n            [{\n                    \"guilds\": 4916,\n                    \"ping\": 124.4,\n                    \"channels\": 123192,\n                    \"members\": 326282,\n                    \"memoryUsage\": \"266.41\",\n                    \"players\": 0,\n                    \"playingPlayers\": 0,\n                    \"cluster\": 0,\n                    \"shardList\": [\n                        0,\n                        1,\n                        2,\n                        3,\n                        4\n                    ]\n                },\n                {\n                    \"guilds\": 4834,\n                    \"ping\": 168.6,\n                    \"channels\": 124016,\n                    \"members\": 321190,\n                    \"memoryUsage\": \"267.27\",\n                    \"players\": 0,\n                    \"playingPlayers\": 0,\n                    \"cluster\": 2,\n                    \"shardList\": [\n                        10,\n                        11,\n                        12,\n                        13,\n                        14\n                    ]\n                },\n                {\n                    \"guilds\": 1936,\n                    \"ping\": 128.5,\n                    \"channels\": 50631,\n                    \"members\": 113248,\n                    \"memoryUsage\": \"128.79\",\n                    \"players\": 0,\n                    \"playingPlayers\": 0,\n                    \"cluster\": 3,\n                    \"shardList\": [\n                        15,\n                        16\n                    ]\n                },\n                {\n                    \"guilds\": 4867,\n                    \"ping\": 126,\n                    \"channels\": 123735,\n                    \"members\": 358463,\n                    \"memoryUsage\": \"265.79\",\n                    \"players\": 0,\n                    \"playingPlayers\": 0,\n                    \"cluster\": 1,\n                    \"shardList\": [\n                        5,\n                        6,\n                        7,\n                        8,\n                        9\n                    ]\n                },\n                {\n                    \"guilds\": 16553,\n                    \"players\": 0,\n                    \"memoryUsage\": 926,\n                    \"members\": 1119183,\n                    \"channels\": 421574,\n                    \"playingPlayers\": 0,\n                    \"cluster\": -1,\n                    \"dateNow\": 1671881448944,\n                    \"dateHumanNow\": \"Saturday, 12/24/2022, 12:30:48\",\n                    \"status\": {\n                        \"error\": \"\",\n                        \"status\": 200\n                    }\n                }\n            ]\n\n        */\n\n    async function getData () {\n        /* Posible responses:\n                    ~ 503: Shards still spawning\n                    * 200: OK\n                    ! 500: Internal error (inside cluster event ready)\n                */\n        try {\n            if (manager.queue.queue.length !== 0) return\n            result = []\n            // Convertimos el objeto Map en un array y lo iteramos con map\n            const Promises = Array.from(manager.clusters).map(async ([key, cluster]) => {\n                const data: any = await cluster.request({ content: 'statistics' })\n                Object.assign(data[0], { cluster: cluster.id, shardList: cluster.shardList })\n                result.push(data[0])\n                return data[0]\n            })\n            // Esperamos a que todas las promesas se completen\n            await Promise.all(Promises).then(data => {\n                // console.log(result)\n                if (data.length === 0) return (result = [{ error: 'Shards still spawning', status: 503 }])\n                const sum = result.reduce(\n                    (\n                        acc: {\n                            guilds: any\n                            players: any\n                            memoryUsage: string\n                            members: any\n                            channels: any\n                            playingPlayers: any\n                        },\n                        element: {\n                            guilds: any\n                            players: any\n                            memoryUsage: string\n                            members: any\n                            channels: any\n                            playingPlayers: any\n                        },\n                    ) => {\n                        // Accedemos a las propiedades del elemento actual del array y las sumamos al acumulador\n                        return {\n                            guilds: acc.guilds + element.guilds,\n                            players: acc.players + element.players,\n                            memoryUsage: parseInt(acc.memoryUsage) + parseInt(element.memoryUsage),\n                            members: acc.members + element.members,\n                            channels: acc.channels + element.channels,\n                            playingPlayers: acc.playingPlayers + element.playingPlayers,\n                        }\n                    },\n                    { guilds: 0, playingPlayers: 0, players: 0, memoryUsage: 0, members: 0, channels: 0 },\n                )\n                Object.assign(sum, {\n                    cluster: -1,\n                    dateNow: Date.now(),\n                    dateHumanNow: new Date().toLocaleString(undefined, {\n                        year: 'numeric',\n                        month: '2-digit',\n                        day: '2-digit',\n                        weekday: 'long',\n                        hour: '2-digit',\n                        hour12: false,\n                        minute: '2-digit',\n                        second: '2-digit',\n                    }),\n                    status: { error: '', status: 200 },\n                })\n                // Agregamos la suma al final del array\n                return result.push(sum)\n                // manager.logger.log(`Guilds: ${sum.guilds} | Playing Players: ${sum.playingPlayers}`)\n            })\n        } catch (e: any) {\n            if (e) logger.error(new Error(e))\n            // * Status 500 is Internal Server Error\n            result.push({\n                error: 'Statistics internal error, call the developer with the next id',\n                status: 500,\n            })\n        }\n    }\n    getData()\n    setInterval(() => {\n        getData()\n    }, 6000)\n}\n"]}