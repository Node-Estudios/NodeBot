{"version":3,"file":"Client.js","sourceRoot":"","sources":["../../src/structures/Client.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,kBAAkB,CAAA;AACrC,OAAO,EAAE,aAAa,IAAI,YAAY,EAAE,OAAO,EAAE,MAAM,yBAAyB,CAAA;AAChF,OAAO,EAAE,MAAM,IAAI,UAAU,EAAmB,MAAM,EAAE,iBAAiB,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAA;AAChH,OAAO,MAAM,MAAM,oBAAoB,CAAA;AACvC,OAAO,YAAY,MAAM,0BAA0B,CAAA;AACnD,OAAO,yBAAyB,CAAA;AAChC,OAAO,EAAE,YAAY,EAAE,MAAM,uBAAuB,CAAA;AACpD,OAAO,YAAY,MAAM,mBAAmB,CAAA;AAK3C,CAAC;AACF,MAAM,CAAC,OAAO,OAAO,MAAO,SAAQ,UAAgB;IAChD,IAAI,CAAU;IACd,OAAO,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAA;IAChC,YAAY,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAA;IACrC,SAAS,GAAG,OAAO,CAAC,eAAe,CAAC;QAChC,eAAe,EAAE,CAAC;QAClB,mBAAmB,EAAE,CAAC;QACtB,mBAAmB,EAAE,CAAC;QACtB,eAAe,EAAE,CAAC;QAClB,iBAAiB,EAAE,CAAC;QACpB,kBAAkB,EAAE,CAAC;QACrB,uBAAuB,EAAE,CAAC;QAC1B,qBAAqB,EAAE,CAAC;QACxB,sBAAsB,EAAE,CAAC;QACzB,kBAAkB,EAAE,CAAC;QACrB,0BAA0B,EAAE,CAAC;QAC7B,WAAW,EAAE;YACT,OAAO,EAAE,EAAE;YACX,aAAa,EAAE,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE;SACtD;QACD,iBAAiB,EAAE;YACf,OAAO,EAAE,EAAE;YACX,aAAa,EAAE,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE;SACtD;KACJ,CAAC,CAAA;IAEF,QAAQ,GAqBJ;QACI,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,KAAwB,IAAI,MAAM,CAAC,KAAK;QAC3D,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ;QAC1B,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU;QAC7B,MAAM,EAAE;YACJ,KAAK,EAAE;gBACH,KAAK,EAAE;oBACH,IAAI,EAAE,oCAAoC;oBAC1C,EAAE,EAAE,qBAAqB;oBACzB,IAAI,EAAE,aAAa;iBACtB;gBACD,IAAI,EAAE;oBACF,IAAI,EAAE,mCAAmC;oBACzC,EAAE,EAAE,qBAAqB;oBACzB,IAAI,EAAE,YAAY;iBACrB;gBACD,OAAO,EAAE;oBACL,IAAI,EAAE,sCAAsC;oBAC5C,EAAE,EAAE,qBAAqB;oBACzB,IAAI,EAAE,eAAe;iBACxB;gBACD,IAAI,EAAE;oBACF,IAAI,EAAE,mCAAmC;oBACzC,EAAE,EAAE,qBAAqB;oBACzB,IAAI,EAAE,YAAY;iBACrB;gBACD,UAAU,EAAE;oBACR,IAAI,EAAE,yCAAyC;oBAC/C,EAAE,EAAE,qBAAqB;oBACzB,IAAI,EAAE,kBAAkB;iBAC3B;gBACD,OAAO,EAAE;oBACL,IAAI,EAAE,sCAAsC;oBAC5C,EAAE,EAAE,qBAAqB;oBACzB,IAAI,EAAE,eAAe;iBACxB;aACJ;YACD,IAAI,EAAE;gBACF,OAAO,EAAE;oBACL,IAAI,EAAE,qCAAqC;oBAC3C,EAAE,EAAE,qBAAqB;oBACzB,IAAI,EAAE,cAAc;iBACvB;gBACD,UAAU,EAAE;oBACR,IAAI,EAAE,wCAAwC;oBAC9C,EAAE,EAAE,qBAAqB;oBACzB,IAAI,EAAE,iBAAiB;iBAC1B;gBACD,UAAU,EAAE;oBACR,IAAI,EAAE,wCAAwC;oBAC9C,EAAE,EAAE,qBAAqB;oBACzB,IAAI,EAAE,iBAAiB;iBAC1B;aACJ;YACD,IAAI,EAAE,EAEL;SACJ;KACJ,CAAA;IAEL,KAAK,GAAG,IAAI,YAAY,EAAE,CAAA;IAC1B,iBAAiB,GAAG,+BAA+B,CAAA;IACnD,QAAQ,GAAG;QACP,MAAM,EAAE;YACJ,QAAQ,EAAE,KAAK;SAClB;KACJ,CAAA;IAED;QACI,KAAK,CAAC;YACF,QAAQ,EAAE,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,QAAQ,CAAC;YAC/C,OAAO,EAAE;gBACL,iBAAiB,CAAC,MAAM;gBACxB,iBAAiB,CAAC,gBAAgB;gBAClC,iBAAiB,CAAC,YAAY;gBAC9B,iBAAiB,CAAC,gBAAgB;gBAClC,iBAAiB,CAAC,qBAAqB;aAC1C;YACD,eAAe,EAAE;gBACb,KAAK,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;gBACzB,WAAW,EAAE,IAAI;aACpB;YACD,MAAM,EAAE,OAAO,EAAE,CAAC,UAAU;YAC5B,UAAU,EAAE,OAAO,EAAE,CAAC,YAAY;SACrC,CAAC,CAAA;QACF,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI;YAAE,MAAM,IAAI,KAAK,CAAC,sFAAsF,CAAC,CAAA;QAC9H,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IAC3C,CAAC;IAED,KAAK,CAAC,IAAI;QACN,IAAI;YAEA,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;YACxC,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YACnC,OAAO,MAAM,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,wBAAwB,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;SACjJ;QAAC,OAAO,CAAC,EAAE;YACR,IAAK,CAAS,CAAC,IAAI,KAAK,eAAe;gBAAE,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAA;SACzE;IACL,CAAC;CACJ","sourcesContent":["import logger from '#utils/logger.js'\nimport { ClusterClient as HybridClient, getInfo } from 'discord-hybrid-sharding'\nimport { Client as ClientBase, ColorResolvable, Colors, GatewayIntentBits, Options, Partials } from 'discord.js'\nimport events from '../events/index.js'\nimport ErrorManager from '../handlers/antiCrash.js'\nimport '../handlers/commands.js'\nimport { EventHandler } from '../handlers/events.js'\nimport MusicManager from './MusicManager.js'\ninterface emoji {\n    full: String\n    id: String\n    name: String\n};\nexport default class Client extends ClientBase<true> {\n    devs: string[]\n    cluster = new HybridClient(this)\n    errorHandler = new ErrorManager(this)\n    makeCache = Options.cacheWithLimits({\n        ReactionManager: 0,\n        ReactionUserManager: 0,\n        GuildStickerManager: 0,\n        GuildBanManager: 0,\n        GuildEmojiManager: 0,\n        GuildInviteManager: 0,\n        GuildForumThreadManager: 0,\n        BaseGuildEmojiManager: 0,\n        GuildTextThreadManager: 0,\n        GuildMemberManager: 0,\n        GuildScheduledEventManager: 0,\n        UserManager: {\n            maxSize: 40,\n            keepOverLimit: member => member.id === this.user.id,\n        },\n        VoiceStateManager: {\n            maxSize: 20,\n            keepOverLimit: member => member.id === this.user.id,\n        },\n    })\n\n    settings: {\n        color: ColorResolvable\n        mode: 'production' | 'development'\n        debug: 'true' | 'false'\n        emojis: {\n            white: {\n                pause: emoji\n                play: emoji\n                shuffle: emoji\n                next: emoji\n                repeat_off: emoji\n                library: emoji\n            }\n            blue: {\n                shuffle: emoji\n                repeat_all: emoji\n                repeat_one: emoji\n            }\n            grey: {\n            }\n        }\n    } = {\n            color: process.env.color as ColorResolvable ?? Colors.Green,\n            mode: process.env.NODE_ENV,\n            debug: process.env.DEBUG_MODE,\n            emojis: {\n                white: {\n                    pause: {\n                        full: '<:white_pause:1133738854415867966>',\n                        id: '1133738854415867966',\n                        name: 'white_pause',\n                    },\n                    play: {\n                        full: '<:white_play:1133381601565360269>',\n                        id: '1133381601565360269',\n                        name: 'white_play',\n                    },\n                    shuffle: {\n                        full: '<:white_shuffle:1133738851672784916>',\n                        id: '1133738851672784916',\n                        name: 'white_shuffle',\n                    },\n                    next: {\n                        full: '<:white_next:1133738850162855986>',\n                        id: '1133738850162855986',\n                        name: 'white_next',\n                    },\n                    repeat_off: {\n                        full: '<:white_repeat_off:1133896931043721267>',\n                        id: '1133896931043721267',\n                        name: 'white_repeat_off',\n                    },\n                    library: {\n                        full: '<:white_library:1133738836858519603>',\n                        id: '1133738836858519603',\n                        name: 'white_library',\n                    },\n                },\n                blue: {\n                    shuffle: {\n                        full: '<:blue_shuffle:1133323554654527540>',\n                        id: '1133323554654527540',\n                        name: 'blue_shuffle',\n                    },\n                    repeat_all: {\n                        full: '<:blue_repeat_all:1133323538024104036>',\n                        id: '1133323538024104036',\n                        name: 'blue_repeat_all',\n                    },\n                    repeat_one: {\n                        full: '<:blue_repeat_one:1133323549088682056>',\n                        id: '1133323549088682056',\n                        name: 'blue_repeat_one',\n                    },\n                },\n                grey: {\n\n                },\n            },\n        }\n\n    music = new MusicManager()\n    officialServerURL = 'https://discord.gg/xhAWYggKKh'\n    services = {\n        sentry: {\n            loggedIn: false,\n        },\n    }\n\n    constructor () {\n        super({\n            partials: [Partials.Channel, Partials.Reaction],\n            intents: [\n                GatewayIntentBits.Guilds,\n                GatewayIntentBits.GuildVoiceStates,\n                GatewayIntentBits.GuildMembers,\n                GatewayIntentBits.GuildVoiceStates,\n                GatewayIntentBits.GuildMessageReactions,\n            ],\n            allowedMentions: {\n                parse: ['users', 'roles'],\n                repliedUser: true,\n            },\n            shards: getInfo().SHARD_LIST,\n            shardCount: getInfo().TOTAL_SHARDS,\n        })\n        if (!process.env.DEVS) throw new Error('Add developers to the .env file, expected input (example): devs=123456789,987654321 ')\n        this.devs = process.env.DEVS.split(',')\n    }\n\n    async init () {\n        try {\n            // * Load Events (./handlers/events.js) ==> ./events/*/* ==> ./cache/events.ts (Collection)\n            console.log('color:', process.env.color)\n            new EventHandler(this).load(events)\n            return await super.login(process.env.DISCORD_TOKEN).then(() => logger.startUp(`${this.user.username} logged in | Cluster ${this.cluster.id}`))\n        } catch (e) {\n            if ((e as any).code === 'TOKEN_INVALID') logger.error('Invalid token')\n        }\n    }\n}\n"]}