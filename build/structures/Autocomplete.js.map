{"version":3,"file":"Autocomplete.js","sourceRoot":"","sources":["../../src/structures/Autocomplete.ts"],"names":[],"mappings":"AAAA,OAAO,aAAa,MAAM,yBAAyB,CAAA;AAGnD,MAAM,CAAC,OAAO,OAAO,YAAY;IAC7B,QAAQ,CAAiB;IACzB,YAAa,OAAwB;QACjC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAA;IAC3B,CAAC;IAED,IAAI,IAAI;QACJ,OAAO,IAAI,CAAC,QAAQ,CAAA;IACxB,CAAC;IAOD,KAAK,CAAC,GAAG,CAAE,WAAoC;QAC3C,OAAO,IAAI,CAAA;IACf,CAAC;IAED,KAAK,CAAE,EAAU;QACb,IAAI,OAAO,IAAI,CAAC,QAAQ,KAAK,QAAQ;YAAE,OAAO,IAAI,CAAC,QAAQ,KAAK,EAAE,CAAA;;YAC7D,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;IACtC,CAAC;IAED,SAAS,CAAE,MAAc,EAAE,aAAqB;QAC5C,OAAO,aAAa,CAAC,SAAS,CAAC,MAAM,EAAE,aAAa,CAAC,CAAA;IACzD,CAAC;CACJ","sourcesContent":["import autocompletes from '#cache/autocompletes.js'\nimport { AutocompleteInteraction } from 'discord.js'\n\nexport default class Autocomplete {\n    #pattern: string | RegExp\n    constructor (pattern: string | RegExp) {\n        this.#pattern = pattern\n    }\n\n    get name () {\n        return this.#pattern\n    }\n\n    /**\n     * Run the autocomplete and return if it was responded or not\n     * @param {AutocompleteInteraction} interaction\n     * @returns {Promise<boolean>}\n     */\n    async run (interaction: AutocompleteInteraction): Promise<boolean> {\n        return true\n    }\n\n    match (id: string) {\n        if (typeof this.#pattern === 'string') return this.#pattern === id\n        else return this.#pattern.test(id)\n    }\n\n    canProced (userId: string, interactionId: string): boolean {\n        return autocompletes.canProced(userId, interactionId)\n    }\n}\n"]}