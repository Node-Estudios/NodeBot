{"version":3,"file":"Command.js","sourceRoot":"","sources":["../../src/structures/Command.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\nimport {\n    RESTPostAPIChatInputApplicationCommandsJSONBody,\n    APIApplicationCommandOption,\n    ChatInputCommandInteraction,\n    PermissionsBitField,\n    PermissionsString,\n    LocalizationMap,\n    ApplicationCommandOptionType,\n} from 'discord.js'\nimport { getLocalesTranslations } from '../utils/Translator.js'\n\nexport default class Command {\n    /**\n     * 1-32 character name; `CHAT_INPUT` command names must be all lowercase matching `^[-_\\p{L}\\p{N}\\p{sc=Deva}\\p{sc=Thai}]{1,32}$`\n     */\n    name: string\n    /**\n     * Localization dictionary for the name field. Values follow the same restrictions as name\n     */\n    name_localizations?: LocalizationMap | null\n    /**\n     * 1-100 character description for `CHAT_INPUT` commands, empty string for `USER` and `MESSAGE` commands\n     */\n    description = '...'\n    /**\n     * Localization dictionary for the description field. Values follow the same restrictions as description\n     */\n    description_localizations?: LocalizationMap | null\n    /**\n     * The localized description\n     */\n    description_localized?: string\n    /**\n     * The parameters for the `CHAT_INPUT` command, max 25\n     */\n    options?: APIApplicationCommandOption[]\n    /**\n     * Set of permissions represented as a bitset\n     */\n    default_member_permissions: PermissionsString[] | null = null\n    /**\n     * Indicates whether the command is available in DMs with the app, only for globally-scoped commands. By default, commands are visible\n     */\n    dm_permission?: boolean\n    /**\n     * Indicates whether the command is age-restricted, defaults to `false`\n     */\n    nsfw?: boolean\n\n    // args: any\n    // cooldown = false\n    only_dm?: boolean\n    permissions: { dev?: boolean, botPermissions?: PermissionsBitField }\n    cooldown = 0\n\n    constructor (\n        command: RESTPostAPIChatInputApplicationCommandsJSONBody & {\n            only_dm?: boolean\n            default_member_permissions?: PermissionsString[] | null\n            permissions?: { dev?: boolean, botPermissions?: PermissionsBitField }\n            cooldown?: number\n        },\n    ) {\n        const {\n            description,\n            name,\n            default_member_permissions,\n            // description_localizations,\n            dm_permission,\n            // name_localizations,\n            nsfw,\n            only_dm,\n            options,\n            permissions,\n            cooldown,\n        } = command\n\n        this.name = name\n        // this.name_localizations = name_localizations\n        this.description = description\n        // this.description_localizations = description_localizations\n        this.options = options\n        this.default_member_permissions = default_member_permissions ?? null\n        this.dm_permission = dm_permission\n        this.nsfw = nsfw\n        this.only_dm = only_dm\n        this.permissions = {\n            dev: !!permissions?.dev,\n            botPermissions: permissions?.botPermissions,\n        }\n        this.cooldown = cooldown ?? 0\n\n        this.name_localizations = this.getNameLocalizations()\n        this.description_localizations = this.getDescriptionLocalizations()\n        if (this.options) this.options = this.parseOptionsLocalizations(this.options)\n    }\n\n    async run (interaction: ChatInputCommandInteraction): Promise<any> {\n        return await interaction.reply({\n            content: 'This command is not ready yet.',\n            ephemeral: true,\n        })\n    }\n\n    getNameLocalizations (): LocalizationMap {\n        return getLocalesTranslations(`commands.${this.name}.name`)\n    }\n\n    getDescriptionLocalizations (): LocalizationMap {\n        return getLocalesTranslations(`commands.${this.name}.description`)\n    }\n\n    parseOptionsLocalizations (options: APIApplicationCommandOption[], deep = `commands.${this.name}.options`): APIApplicationCommandOption[] {\n        return options.map((option) => ({\n            ...option,\n            name_localizations: getLocalesTranslations(`${deep}.${option.name}.name`),\n            description_localizations: getLocalesTranslations(`${deep}.${option.name}.description`),\n            options: option.type === ApplicationCommandOptionType.Subcommand || option.type === ApplicationCommandOptionType.SubcommandGroup ? this.parseOptionsLocalizations(option.options ?? [], `${deep}.${option.name}.options`) : undefined,\n        })) as APIApplicationCommandOption[]\n    }\n\n    toJSON (): RESTPostAPIChatInputApplicationCommandsJSONBody {\n        return {\n            name: this.name,\n            name_localizations: this.name_localizations,\n            description: this.description,\n            nsfw: this.nsfw,\n            description_localizations: this.description_localizations,\n            options: this.options,\n            default_member_permissions: this.default_member_permissions?.length\n                ? new PermissionsBitField(this.default_member_permissions).bitfield.toString()\n                : null,\n            dm_permission: this.dm_permission,\n        }\n    }\n}\n"]}