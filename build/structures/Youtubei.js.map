{"version":3,"file":"Youtubei.js","sourceRoot":"","sources":["../../src/structures/Youtubei.ts"],"names":[],"mappings":"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","sourcesContent":["import {  Collection, GuildMember, Message  } from 'discord.js'\nimport EmbedBuilder from '#structures/EmbedBuilder.js'\nimport Music from 'youtubei.js/dist/src/core/clients/Music.js'\nimport { SpamIntervalDB } from './spamInterval.js'\nimport { Session, Innertube } from 'youtubei.js'\nimport UserModel from '#models/user.js'\nimport logger from '#utils/logger.js'\nconst spamInterval = new SpamIntervalDB()\ntype UserExtended = GuildMember & {\n    youtubei: Youtubei\n}\nexport default class Youtubei {\n    youtubeCodes = new Collection<string, UserExtended>()\n    spamInterval = spamInterval\n    user: UserExtended\n    music!: Music\n    session!: Session\n    constructor (user: UserExtended) {\n        this.user = user\n    }\n\n    async createSession () {\n        const innertube = await Innertube.create({\n            // cache: new UniversalCache()\n        })\n        this.music = innertube.music\n        this.session = innertube.session\n        await this.start()\n        return this\n    }\n\n    get () {\n        return this\n    }\n\n    async start () {\n        this.startListeners()\n    }\n\n    private async sendSpamMSG (user: UserExtended, msg: Message) {}\n    private async checkUserSpamInterval (user: UserExtended) {\n        if (!this.spamInterval.checkUser(user.id)) {\n            const embed = new EmbedBuilder().setDescription(\n                'Has iniciado sesión correctamente. Node ya tiene acceso para ver tus canciones favoritas! Si deseas revocar este acceso, puedes hacerlo desde [este link de google](https://myaccount.google.com/permissions)',\n            )\n            this.spamInterval.addUser(user.id, 7 * 24 * 60 * 60 * 1000)\n            return await user.send({ embeds: [embed] }).catch(e => {\n                logger.error(e)\n            })\n        }\n    }\n\n    async startListeners () {\n        logger.debug('Starting listeners YTi')\n        const user = this.user\n        // Espera a que el objeto \"player\" esté disponible y luego accede a la propiedad \"youtubei\"\n        this.session.on('auth-pending', (data: { user_code: any, verification_url: any }) => {\n            // Imprime un mensaje de depuración\n            logger.debug('auth pending')\n            // Verifica si el usuario ha superado el límite de tiempo para enviar mensajes\n            if (!this.spamInterval.checkUser(user.id)) {\n                this.youtubeCodes.set(data.user_code, user)\n                // Crea un objeto \"EmbedBuilder\" y establece la descripción y los campos del mensaje\n                const embed = new EmbedBuilder()\n                    .setDescription('It seems like you dont sign in using Youtube, would you like to?')\n                    .addFields([\n                        {\n                            name: `Sign in with youtube in the next link; Use code: ${data.user_code}`,\n                            value: data.verification_url,\n                        },\n                    ])\n                // Añade el usuario al registro de spamInterval y establece el intervalo de tiempo en 30 minutos\n                this.spamInterval.addUser(user.id, 30 * 60 * 1000)\n                // Envía el mensaje al usuario a través de un mensaje privado\n                user.send({ embeds: [embed] }).catch(e => {\n                    // Si hay un problema al enviar el mensaje privado, envía un mensaje en el canal de texto especificado\n                    logger.error(e)\n                })\n            }\n        })\n\n        // Espera a que el objeto \"player\" esté disponible y luego accede a la propiedad \"youtubei\"\n        // Define un manejador de evento para el evento \"update-credentials\" en la sesión de YouTubeI\n        this.session.on('update-credentials', ({ credentials }: any) => {\n            // Busca un documento en la base de datos que coincida con el ID del usuario\n            UserModel.findOne({ id: user.id }).then(async (user2: any) => {\n                // Si se encuentra un documento, actualiza las credenciales y lo guarda\n                if (user2) {\n                    user2.credentials = credentials\n                    return user2.save()\n                    // Si no se encuentra un documento, crea uno nuevo con el ID del usuario, las credenciales y algunas propiedades predeterminadas\n                } else {\n                    return UserModel.create({\n                        id: user.id,\n                        executedCommands: 0,\n                        roles: { Developer: { enabled: false }, Tester: { enabled: false }, credentials },\n                    })\n                }\n            })\n        })\n        // Define un manejador de evento para el evento \"auth\" en la sesión de YouTubeI\n        this.session.on('auth', async ({ credentials }: any) => {\n            logger.debug('iniciado sesión correctamente')\n            // Busca un documento en la base de datos que coincida con el ID del usuario\n            UserModel.findOne({ id: user.id }).then(async (user2: any) => {\n                credentials.expires_at = Date.now() + credentials.expires_in * 1000\n                // Si se encuentra un documento, actualiza las credenciales y lo guarda\n                if (user2) {\n                    user2.credentials = credentials\n                    return user2.save()\n                    // Si no se encuentra un documento, crea uno nuevo con el ID del usuario, las credenciales y algunas propiedades predeterminadas\n                } else {\n                    return UserModel.create({\n                        id: user.id,\n                        executedCommands: 0,\n                        roles: { Developer: { enabled: false }, Tester: { enabled: false }, credentials },\n                    })\n                }\n            })\n            // await this.session?.oauth.cacheCredentials();\n            // Imprime un mensaje de depuración\n            // logger.debug('Sign in successful: ', credentials);\n            // Crea un objeto \"EmbedBuilder\" y establece la descripción del mensaje\n            if (!this.spamInterval.checkUser(user.id)) {\n                const embed = new EmbedBuilder().setDescription(\n                    'Has iniciado sesión correctamente. Node ya tiene acceso para ver tus canciones favoritas! Si deseas revocar este acceso, puedes hacerlo desde [este link de google](https://myaccount.google.com/permissions)',\n                )\n                this.spamInterval.addUser(user.id, 7 * 24 * 60 * 60 * 1000)\n                return await user.send({ embeds: [embed] }).catch(e => {\n                    logger.error(e)\n                })\n            }\n        })\n    }\n}\n"]}