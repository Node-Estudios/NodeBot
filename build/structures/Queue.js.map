{"version":3,"file":"Queue.js","sourceRoot":"","sources":["../../src/structures/Queue.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAA;AAIlD,MAAM,CAAC,OAAO,OAAO,KAAM,SAAQ,KAAY;IAC3C,OAAO,CAAc;IACrB,QAAQ,CAAc;IACtB;QACI,KAAK,EAAE,CAAA;QACP,IAAI,CAAC,OAAO,GAAG,IAAI,CAAA;QACnB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAA;IACxB,CAAC;IAED,GAAG,CAAE,KAAY,EAAE,KAAc;QAE7B,IAAI,CAAC,IAAI,CAAC,OAAO;YAAE,IAAI,CAAC,OAAO,GAAG,KAAK,CAAA;aAClC,IAAI,CAAC,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ;YAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;;YACzD,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,KAAK,CAAC,CAAA;IACrC,CAAC;IAED,MAAM,CAAE,KAAa;QACjB,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAA;IACzB,CAAC;IAED,KAAK;QACD,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;IAClB,CAAC;IAED,QAAQ,CAAE,IAAY;QAClB,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,GAAG,QAAQ,cAAc,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC,WAAW,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,CAAC,CAAA;IACtJ,CAAC;IAED,OAAO;QACH,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YACvC,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CACxC;YAAA,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;QAChD,CAAC;IACL,CAAC;IAED,SAAS;QACL,OAAO,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IAC/C,CAAC;CACJ","sourcesContent":["import { User } from 'discord.js'\nimport { formatDuration } from './MusicManager.js'\nimport yasha from 'yasha'\n\ntype Track = any\nexport default class Queue extends Array<Track> {\n    current: Track | null\n    previous: Track | null\n    constructor () {\n        super()\n        this.current = null\n        this.previous = null\n    }\n\n    add (track: Track, index?: number) {\n        // console.log('trackeddd', track)\n        if (!this.current) this.current = track\n        else if (!index || typeof index !== 'number') this.push(track)\n        else this.splice(index, 0, track)\n    }\n\n    remove (index: number) {\n        this.splice(index, 1)\n    }\n\n    clear () {\n        this.splice(0)\n    }\n\n    retrieve (page: number) {\n        return this.map((song, i) => `**${i + 1}.** [${song.title}](${song.url}) \\`[${formatDuration(song.duration ?? 0)}]\\` â€¢ <@${song.requester.id}>\\n`)\n    }\n\n    shuffle () {\n        for (let i = this.length - 1; i > 0; i--) {\n            const n = Math.floor(Math.random() * (i + 1))\n                ;[this[i], this[n]] = [this[n], this[i]]\n        }\n    }\n\n    totalSize () {\n        return this.length + (this.current ? 1 : 0)\n    }\n}\n"]}