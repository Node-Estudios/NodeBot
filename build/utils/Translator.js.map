{"version":3,"file":"Translator.js","sourceRoot":"","sources":["../../src/utils/Translator.ts"],"names":[],"mappings":"AACA,OAAO,MAAM,MAAM,aAAa,CAAA;AAChC,OAAO,IAAI,MAAM,cAAc,CAAA;AAC/B,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAA;AAC3B,OAAO,IAAI,MAAM,MAAM,CAAA;AAEvB,IAAI,CAAC,SAAS,CAAC;IACX,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,SAAS,CAAC;IACzC,aAAa,EAAE,OAAO;IACtB,oBAAoB,EAAE,IAAI;IAC1B,cAAc,EAAE,IAAI;IACpB,WAAW,EAAE,KAAK;IAElB,SAAS,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;IACpC,UAAU,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;IACtC,YAAY,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;QAC5B,MAAM,CAAC,IAAI,CAAC,eAAe,KAAK,cAAc,MAAM,EAAE,CAAC,CAAA;QACvD,OAAO,KAAK,CAAA;IAChB,CAAC;CACJ,CAAC,CAAA;AAeF,MAAM,CAAC,OAAO,UAAU,UAAU,CAAE,WAA+C;IAC/E,MAAM,IAAI,GAAG,OAAO,WAAW,KAAK,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAE,WAA2B,CAAC,MAAM,IAAK,WAAqB,CAAC,eAAe,IAAI,IAAI,CAAA;IAElJ,OAAO,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,OAAO,CAAC,CAAA;AAC5E,CAAC;AAED,MAAM,UAAU,aAAa,CAAE,SAAoB,EAAE,IAAoC;IACrF,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAgB,CAAA;IAClG,OAAO,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;AAC/B,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAE,MAAc;IAClD,MAAM,OAAO,GAAoB,EAAE,CAAA;IACnC,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,UAAU,EAAoB,EAAE,CAAC;QACvD,MAAM,SAAS,GAAG,UAAU,CAAC,MAAM,CAAC,CAAA;QACpC,OAAO,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;IACvC,CAAC;IACD,OAAO,OAAO,CAAA;AAClB,CAAC;AAED,OAAO,EAAE,IAAI,EAAE,CAAA","sourcesContent":["import { Guild, Interaction, LocaleString, LocalizationMap } from 'discord.js'\nimport logger from './logger.js'\nimport keys from './locales.js'\nimport { join } from 'path'\nimport i18n from 'i18n'\n\ni18n.configure({\n    directory: join(process.cwd(), 'locales'),\n    defaultLocale: 'en-US',\n    retryInDefaultLocale: true,\n    objectNotation: true,\n    updateFiles: false,\n    // logDebugFn: (msg) => logger.debug(msg),\n    logWarnFn: (msg) => logger.warn(msg),\n    logErrorFn: (msg) => logger.error(msg),\n    missingKeyFn: (locale, value) => {\n        logger.warn(`Missing key ${value} in locale ${locale}`)\n        return value\n    },\n})\n\n/**\n * It takes a phrase and an optional object of parameters, and returns a translated string\n * @param {string} phrase - The phrase to translate\n * @param {object} [replace] - An object whit the parameters to replace\n * @returns {string} - The translated string\n */\ntype translate = (phrase: string, replace?: object) => string\n\n/**\n * It takes an interaction and returns a function that takes a phrase and returns a translation\n * @param {Interaction | Guild} interaction - Interaction - The interaction object that contains the locale and client.\n * @returns {transalte} A function that takes a phrase and params and returns a string.\n */\nexport default function Translator (interaction: Interaction | Guild | LocaleString): translate {\n    const lang = typeof interaction === 'string' ? interaction : (interaction as Interaction).locale ?? (interaction as Guild).preferredLocale ?? 'en'\n\n    return (phrase, replace) => i18n.__mf({ phrase, locale: lang }, replace)\n}\n\nexport function randomMessage (translate: translate, keys: { [key: `${number}`]: string }) {\n    const key = Object.keys(keys)[Math.floor(Math.random() * Object.keys(keys).length)] as `${number}`\n    return translate(keys[key])\n}\n\nexport function getLocalesTranslations (phrase: string): LocalizationMap {\n    const locales: LocalizationMap = {}\n    for (const locale of i18n.getLocales() as LocaleString[]) {\n        const transalte = Translator(locale)\n        locales[locale] = transalte(phrase)\n    }\n    return locales\n}\n\nexport { keys }\n"]}