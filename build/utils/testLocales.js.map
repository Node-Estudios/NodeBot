{"version":3,"file":"testLocales.js","sourceRoot":"","sources":["../../src/utils/testLocales.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs/promises'\nimport { SlashCommandAssertions } from 'discord.js'\nimport { join } from 'path'\n\nfor (const file of await fs.readdir(join(process.cwd(), 'locales'))) {\n    const { default: json } = await import(join(process.cwd(), 'locales', file), { assert: { type: 'json' } })\n    const command = json.commands as { [key: string]: { name: string, description: string, options?: { [key: string]: { name: string, description: string, options?: { [key: string]: { name: string, description: string } } } } } }\n    for (const key in command) {\n        const { name, description, options } = command[key]\n        validateName(name, file, key)\n        validateDescription(description, file, key)\n        if (options) validateOptions(options, file, key)\n    }\n}\n\nfunction validateName (name: string, file: string, key: string) {\n    if (!name) {\n        console.error(`\\x1b[31mERROR:\\x1b[0m: Missing name in \\x1b[32m\"${file}\" for \\x1b[32m\"${key}\" command`)\n        process.exit(1)\n    }\n    if (name.toLowerCase() !== name) {\n        console.error(`\\x1b[31mERROR:\\x1b[0m: Name in \\x1b[32m\"${file}\" for \\x1b[32m\"${key}\" command is not lowercase`)\n        process.exit(1)\n    }\n    if (name.length > 32) {\n        console.error(`\\x1b[31mERROR:\\x1b[0m: Name in \\x1b[32m\"${file}\" for \\x1b[32m\"${key}\" command is too long`)\n        process.exit(1)\n    }\n    try {\n        SlashCommandAssertions.validateName(name)\n    } catch (e) {\n        console.error(`\\x1b[31mERROR:\\x1b[0m: Name in \\x1b[32m\"${file}\" for \\x1b[32m\"${key}\" command is not valid`, e)\n        process.exit(1)\n    }\n}\n\nfunction validateDescription (description: string, file: string, key: string) {\n    if (!description) {\n        console.error(`\\x1b[31mERROR:\\x1b[0m: Missing description in \\x1b[32m\"${file}\" for \\x1b[32m\"${key}\" command`)\n        process.exit(1)\n    }\n    if (description.length > 100) {\n        console.error(`\\x1b[31mERROR:\\x1b[0m: Description in \\x1b[32m\"${file}\" for \\x1b[32m\"${key}\" command is too long`)\n        process.exit(1)\n    }\n    try {\n        SlashCommandAssertions.validateDescription(description)\n    } catch (e) {\n        console.error(`\\x1b[31mERROR:\\x1b[0m: Description in \\x1b[32m\"${file}\" for \\x1b[32m\"${key}\" command is not valid`, e)\n        process.exit(1)\n    }\n}\n\nfunction validateOptions (option: { [key: string]: { name: string, description: string, options?: { [key: string]: { name: string, description: string } } } }, file: string, key: string) {\n    for (const optionName in option) {\n        const { name, description, options } = option[optionName]\n        validateName(name, file, optionName)\n        validateDescription(description, file, `${key}.${optionName}`)\n        if (options) validateOptions(options, file, `${key}.${optionName}`)\n    }\n}\n"]}