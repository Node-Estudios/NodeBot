{"version":3,"file":"retrieveUserLang.js","sourceRoot":"","sources":["../../../src/utils/db/retrieveUserLang.ts"],"names":[],"mappings":"AAAA,OAAO,EAAuB,WAAW,EAAE,MAAM,YAAY,CAAA;AAC7D,OAAO,SAAmB,MAAM,iBAAiB,CAAA;AAEjD,KAAK,UAAU,cAAc,CAAE,KAAW;IACtC,OAAO,MAAM,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;AACxC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,aAAa,CAAE,KAAyC;IAE1E,QAAQ,IAAI,EAAE;QACV,KAAK,KAAK,YAAY,WAAW;YAC7B,OAAO,MAAM,SAAS,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAG,KAAqB,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,CAAM,EAAE,IAAU,EAAE,EAAE;gBACpG,IAAI,IAAI;oBAAE,OAAO,IAAI,CAAA;gBACrB,OAAO,MAAM,cAAc,CAAC;oBACxB,EAAE,EAAG,KAAqB,CAAC,EAAE;oBAC7B,gBAAgB,EAAE,CAAC;oBACnB,KAAK,EAAE,EAAE,SAAS,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;iBACvE,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;QACN,KAAK,KAAK,YAAY,MAAM;YACxB,OAAO,MAAM,SAAS,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,KAAe,EAAE,EAAE,KAAK,EAAE,KAAU,EAAE,IAAU,EAAE,EAAE;gBAC9F,IAAI,IAAI,EAAE;oBACN,OAAO,IAAI,CAAA;iBACd;gBACD,IAAI,CAAC,IAAI,EAAE;oBACP,OAAO,MAAM,cAAc,CAAC;wBACxB,EAAE,EAAG,KAAqB,CAAC,EAAE;wBAC7B,gBAAgB,EAAE,CAAC;wBACnB,KAAK,EAAE,EAAE,SAAS,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;qBACvE,CAAC,CAAA;iBACL;gBACD,OAAO,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAA;YACnC,CAAC,CAAC,CAAA;QACN;YACI,OAAO,IAAI,CAAA;KAClB;AACL,CAAC","sourcesContent":["import { User as DiscordUser, GuildMember } from 'discord.js'\nimport Usermodel, { User } from '#models/user.js'\n\nasync function createUserInDB (input: User) {\n    return await Usermodel.create(input)\n}\n\nexport async function getUserFromDB (input: GuildMember | DiscordUser | string): Promise<User | null> {\n    // logger.debug('getUserFromDB exeuted with input: ' + input)\n    switch (true) {\n        case input instanceof GuildMember:\n            return await Usermodel.findOneAndUpdate({ id: (input as GuildMember).id }, async (_: any, user: User) => {\n                if (user) return user\n                return await createUserInDB({\n                    id: (input as GuildMember).id,\n                    executedCommands: 0,\n                    roles: { Developer: { enabled: false }, Tester: { enabled: false } },\n                })\n            })\n        case input instanceof String:\n            return await Usermodel.findOneAndUpdate({ id: input as String }, async (error: any, user: User) => {\n                if (user) {\n                    return user\n                }\n                if (!user) {\n                    return await createUserInDB({\n                        id: (input as GuildMember).id,\n                        executedCommands: 0,\n                        roles: { Developer: { enabled: false }, Tester: { enabled: false } },\n                    })\n                }\n                return error ? undefined : user\n            })\n        default:\n            return null\n    }\n}\n"]}