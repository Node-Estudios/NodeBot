{"version":3,"file":"retrieveUserLang.js","sourceRoot":"","sources":["../../../src/utils/db/retrieveUserLang.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,IAAI,WAAW,EAAE,WAAW,EAAE,MAAM,YAAY,CAAA;AAE7D,OAAO,SAA8B,MAAM,iBAAiB,CAAA;AAM5D,MAAM,CAAC,KAAK,UAAU,aAAa,CAAE,KAAyC;IAC1E,IAAI,MAAc,CAAA;IAElB,IAAI,OAAO,KAAK,KAAK,QAAQ;QACzB,MAAM,GAAG,KAAK,CAAA;SACb,IAAI,KAAK,YAAY,WAAW,IAAI,KAAK,YAAY,WAAW;QACjE,MAAM,GAAG,KAAK,CAAC,EAAE,CAAA;SAChB,CAAC;QACF,OAAO,CAAC,KAAK,CAAC,4CAA4C,EAAE,KAAK,CAAC,CAAA;QAClE,OAAO,IAAI,CAAA;IACf,CAAC;IAGD,MAAM,eAAe,GAAgB;QACjC,EAAE,EAAE,MAAM;QAGV,gBAAgB,EAAE,CAAC;QACnB,KAAK,EAAE,EAAE,SAAS,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;KAEvE,CAAA;IAED,IAAI,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,SAAS,CAAC,gBAAgB,CACzC,EAAE,EAAE,EAAE,MAAM,EAAE,EACd,EAAE,YAAY,EAAE,eAAe,EAAE,EACjC;YACI,GAAG,EAAE,IAAI;YACT,MAAM,EAAE,IAAI;YACZ,mBAAmB,EAAE,IAAI;SAC5B,CACJ,CAAA;QAGD,OAAO,IAAI,CAAA;IACf,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,mDAAmD,EAAE,KAAK,CAAC,CAAA;QACzE,OAAO,IAAI,CAAA;IACf,CAAC;AACL,CAAC","sourcesContent":["import { User as DiscordUser, GuildMember } from 'discord.js'\n// Import BOTH User (Mongoose doc type) and IUserBase (plain data type)\nimport Usermodel, { User, IUserBase } from '#models/user.js' // <-- Import IUserBase\n\n// Define NewUserData based on the plain data interface IUserBase\n// Note: We don't need the Omit utility type anymore\ntype NewUserData = IUserBase\n\nexport async function getUserFromDB (input: GuildMember | DiscordUser | string): Promise<User | null> {\n    let userId: string\n\n    if (typeof input === 'string')\n        userId = input\n    else if (input instanceof GuildMember || input instanceof DiscordUser)\n        userId = input.id\n    else {\n        console.error('getUserFromDB received invalid input type:', input)\n        return null\n    }\n\n    // 'defaultUserData' now correctly expects a plain object matching IUserBase\n    const defaultUserData: NewUserData = {\n        id: userId,\n        // We only need fields defined in IUserBase here\n        // Mongoose applies schema defaults for lang/banned on insert if needed\n        executedCommands: 0, // As required by IUserBase\n        roles: { Developer: { enabled: false }, Tester: { enabled: false } },\n        // credentials: undefined, // Explicitly undefined or omit if not creating credentials by default\n    }\n\n    try {\n        // findOneAndUpdate still returns the Mongoose Document type 'User' or null\n        const user = await Usermodel.findOneAndUpdate(\n            { id: userId },\n            { $setOnInsert: defaultUserData }, // Pass the plain object\n            {\n                new: true,\n                upsert: true,\n                setDefaultsOnInsert: true, // Ensure trailing comma if needed by comma-dangle\n            }, // Ensure trailing comma if needed by comma-dangle\n        ) // Removed .lean() - function returns Promise<User | null>\n\n        // Return type (User | null) now matches function signature correctly\n        return user\n    } catch (error) {\n        console.error('Error interacting with database in getUserFromDB:', error)\n        return null\n    }\n} // Ensure final newline if needed by eol-last\n"]}