{"version":3,"file":"embed.js","sourceRoot":"","sources":["../../../src/slash/modals/embed.ts"],"names":[],"mappings":"AAAA,OAAO,EAA2B,gBAAgB,EAAE,aAAa,EAAE,WAAW,EAAG,MAAM,YAAY,CAAA;AACnG,OAAO,YAAY,MAAM,6BAA6B,CAAA;AACtD,OAAO,UAAU,EAAE,EAAE,IAAI,EAAE,MAAM,sBAAsB,CAAA;AACvD,OAAO,KAAK,MAAM,sBAAsB,CAAA;AACxC,OAAO,KAAK,MAAM,sBAAsB,CAAA;AACxC,OAAO,MAAM,MAAM,kBAAkB,CAAA;AAErC,MAAM,CAAC,OAAO,OAAO,KAAM,SAAQ,KAAK;IACpC;QACI,KAAK,CAAC,mBAAmB,CAAC,CAAA;IAC9B,CAAC;IAEQ,KAAK,CAAC,GAAG,CAAE,WAAmC;QACnD,MAAM,SAAS,GAAG,UAAU,CAAC,WAAW,CAAC,CAAA;QACzC,MAAM,CAAC,EAAC,MAAM,EAAE,SAAS,CAAC,GAAG,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QAC5D,MAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAA;QAC3D,MAAM,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAA;QACvE,MAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAA;QAC3D,IAAI,CAAC,KAAK,IAAI,CAAC,WAAW;YAAE,OAAM;QAClC,MAAM,KAAK,GAAG,IAAI,YAAY,EAAE,CAAA;QAChC,IAAI,KAAK;YAAE,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;QAChC,IAAI,WAAW;YAAE,KAAK,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAClD,IAAI,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;YAAE,KAAK,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAA;QACvE,IAAI,MAAM,KAAK,GAAG;YACd,OAAO,MAAM,WAAW,CAAC,KAAK,CAAC;gBAC3B,OAAO,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,SAAS;gBAChF,MAAM,EAAE,CAAC,KAAK,CAAC;gBACf,SAAS,EAAE,IAAI;gBACf,UAAU,EAAE;oBACR,IAAI,gBAAgB,EAAiB,CAAC,aAAa,CAC/C,IAAI,aAAa,EAAE,CAAC,WAAW,CAAC,UAAU,GAAG,SAAS,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,EACtG,IAAI,aAAa,EAAE,CAAC,WAAW,CAAC,UAAU,GAAG,SAAS,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,CAC5G;iBACJ;aACJ,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;QAE1B,IAAI,WAAW,CAAC,aAAa,EAAE;YAAE,OAAO,MAAM,WAAW,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,WAAW,CAAC,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;QACtJ,MAAM,WAAW,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;IACvD,CAAC;CACJ","sourcesContent":["import {  ModalSubmitInteraction, ActionRowBuilder, ButtonBuilder, ButtonStyle  } from 'discord.js'\nimport EmbedBuilder from '#structures/EmbedBuilder.js'\nimport Translator, { keys } from '#utils/Translator.js'\nimport Modal from '#structures/Modal.js'\nimport Color from '#structures/Color.js'\nimport logger from '#utils/logger.js'\n\nexport default class Embed extends Modal {\n    constructor () {\n        super(/embed:(n)|(e):\\d*/)\n    }\n\n    override async run (interaction: ModalSubmitInteraction): Promise<any> {\n        const translate = Translator(interaction)\n        const [,option, channelId] = interaction.customId.split(':')\n        const title = interaction.fields.getTextInputValue('title')\n        const description = interaction.fields.getTextInputValue('description')\n        const color = interaction.fields.getTextInputValue('color')\n        if (!title && !description) return // ignore if no title or description\n        const embed = new EmbedBuilder()\n        if (title) embed.setTitle(title)\n        if (description) embed.setDescription(description)\n        if (color && Color.isColor(color)) embed.setColor(new Color(color).hex)\n        if (option === 'n')\n            return await interaction.reply({\n                content: !Color.isColor(color) ? translate(keys.embed.invalid_input) : undefined,\n                embeds: [embed],\n                ephemeral: true,\n                components: [\n                    new ActionRowBuilder<ButtonBuilder>().setComponents(\n                        new ButtonBuilder().setCustomId('embed:e:' + channelId).setLabel('Edit').setStyle(ButtonStyle.Primary),\n                        new ButtonBuilder().setCustomId('embed:p:' + channelId).setLabel('Publish').setStyle(ButtonStyle.Success),\n                    ),\n                ],\n            }).catch(logger.error)\n\n        if (interaction.isFromMessage()) return await interaction.update({ embeds: [embed], components: interaction.message?.components }).catch(logger.error)\n        await interaction.deferUpdate().catch(logger.error)\n    }\n}\n"]}