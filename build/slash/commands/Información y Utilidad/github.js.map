{"version":3,"file":"github.js","sourceRoot":"","sources":["../../../../src/slash/commands/Información y Utilidad/github.ts"],"names":[],"mappings":"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","sourcesContent":["import {  ApplicationCommandOptionType, Colors, ChatInputCommandInteraction  } from 'discord.js'\nimport EmbedBuilder from '#structures/EmbedBuilder.js'\nimport Translator, { keys } from '#utils/Translator.js'\nimport Command from '#structures/Command.js'\nimport Client from '#structures/Client.js'\n\nexport default class github extends Command {\n    constructor () {\n        super({\n            name: 'github',\n            description: 'Show Information about a Github Account.',\n            cooldown: 5,\n            options: [\n                {\n                    type: ApplicationCommandOptionType.String,\n                    name: 'account',\n                    description: 'Account to show information about.',\n                    name_localizations: {\n                        'es-ES': 'cuenta',\n                        'en-US': 'account',\n                    },\n                    description_localizations: {\n                        'es-ES': 'Cuenta para mostrar la información.',\n                        'en-US': 'Account to show information about.',\n                    },\n                    required: true,\n                },\n            ],\n        })\n    }\n\n    override async run (interaction: ChatInputCommandInteraction) {\n        const translate = Translator(interaction)\n        const client = interaction.client as Client\n        const accountName = interaction.options.getString('account', true)\n        const account = await fetch(`https://api.github.com/users/${accountName}`, {\n            headers: {\n                Accept: 'application/vnd.github.v3+json',\n                scheme: 'https',\n                'accept-encoding': 'gzip, deflate, br',\n                'accept-language': 'en,es-ES;q=0.9,es;q=0.8',\n                'user-agent':\n                    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36',\n            },\n        })\n            .then(async r => await r.json())\n            .catch(() => null)\n\n        if (!account?.id) {\n            return await interaction.reply({\n                embeds: [\n                    new EmbedBuilder()\n                        .setColor(Colors.Red)\n                        .setTitle(translate(keys.ERROREMBED) + ' <:error:897836005787308062>')\n                        .setDescription(translate(keys.github.unknow))\n                        .setFooter({\n                            text: interaction.user.username + '#' + interaction.user.discriminator,\n                            iconURL: interaction.user.displayAvatarURL(),\n                        }),\n                ],\n            })\n        }\n\n        const embed = new EmbedBuilder().setThumbnail(account.avatar_url).setColor(client.settings.color)\n        if (account.name) { embed.addFields({ name: `${translate(keys.github.name)}`, value: account.name.toString(), inline: true }) }\n        if (account.type) { embed.addFields({ name: `${translate(keys.github.account)}`, value: account.type.toString(), inline: true }) }\n        if (account.company) { embed.addFields({ name: `${translate(keys.github.organization)}`, value: account.company.toString(), inline: true }) }\n        if (account.blog) { embed.addFields({ name: `${translate(keys.github.link)}`, value: account.blog.toString(), inline: true }) }\n        if (account.location) { embed.addFields({ name: `${translate(keys.github.location)}`, value: account.location.toString(), inline: true }) }\n        if (account.email) { embed.addFields({ name: `${translate(keys.github.email)}`, value: account.email.toString(), inline: true }) }\n        if (account.public_repos) { embed.addFields({ name: `${translate(keys.github.repositories)}`, value: account.public_repos.toString(), inline: true }) }\n        if (account.followers) { embed.addFields({ name: `${translate(keys.github.followers)}`, value: account.followers.toString(), inline: true }) }\n        if (account.twitter_username) {\n            embed.addFields({\n                name: `${translate(keys.github.twitter)}`,\n                value: account.twitter_username.toString(),\n                inline: true,\n            })\n        }\n        if (account.bio) embed.addFields({ name: `${translate(keys.github.biography)}`, value: account.bio.toString() })\n\n        return await interaction.reply({\n            embeds: [embed],\n        })\n    }\n}\n"]}