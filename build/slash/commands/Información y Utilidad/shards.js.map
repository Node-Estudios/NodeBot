{"version":3,"file":"shards.js","sourceRoot":"","sources":["../../../../src/slash/commands/Informaci√≥n y Utilidad/shards.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChatInputCommandInteraction } from 'discord.js'\nimport EmbedBuilder from '#structures/EmbedBuilder.js'\nimport Command from '#structures/Command.js'\nimport logger from '#utils/logger.js'\nimport Sentry from '@sentry/node'\nimport Client from '#structures/Client.js'\n\nexport default class shards extends Command {\n    constructor () {\n        super({\n            name: 'shards',\n            description: 'Get information about shards.',\n            cooldown: 30,\n        })\n    }\n\n    override async run (interaction: ChatInputCommandInteraction<'cached'>) {\n        await interaction.deferReply()\n        const client = interaction.client as Client\n        const embeds = []\n        const totalMembers = await this.getMembersCount(client)\n        const totalGuilds = await this.getGuildsCount(client)\n        const shardInfo = await this.shardInfo(client)\n        let totalPlayers = 0\n        let totalPlayingPlayers = 0\n        const totalMemory = shardInfo.reduce((prev, s) => prev + parseInt(s.memoryUsage), 0)\n        const totalChannels = shardInfo.reduce((prev, s) => prev + s.channels, 0)\n        const avgLatency = Math.round(shardInfo.reduce((prev, s) => prev + s.ping, 0) / shardInfo.length)\n\n        const embedsPerMessage = 10\n\n        const defaultEmbed = new EmbedBuilder()\n            .setColor(client.settings.color)\n            .setDescription(`This guild is currently on **Cluster ${client.cluster.id}**.`)\n            .setAuthor({ name: 'NodeBot', iconURL: client.user.displayAvatarURL({ forceStatic: false }) })\n\n        interaction.editReply({ embeds: [defaultEmbed] }) // Edit the initial reply with the default embed\n\n        for (let n = 0; n < Math.ceil(shardInfo.length / embedsPerMessage); n++) {\n            const startIndex = n * embedsPerMessage\n            const endIndex = startIndex + embedsPerMessage\n            const shardArray = shardInfo.slice(startIndex, endIndex)\n\n            const embed = new EmbedBuilder()\n                .setColor(client.settings.color)\n\n            for (const shard of shardArray) {\n                const status = shard.status === 'online' ? '<:greendot:894171595365560340>' : '<:RedSmallDot:969759818569093172>'\n                embed.addFields([\n                    {\n                        inline: true,\n                        name: `${status} Cluster ${(shard.id).toString()}`,\n                        value: `\\`\\`\\`Servers: ${shard.guilds.toLocaleString()}\\nChannels: ${shard.channels.toLocaleString()}\\nUsers: ${shard.members.toLocaleString()}\\nMemory: ${Number(shard.memoryUsage).toLocaleString()} MB\\nAPI: ${shard.ping.toLocaleString()} ms\\nPlayers: ${shard.playingPlayers.toLocaleString()}/${shard.players.toLocaleString()} \\`\\`\\``,\n                    },\n                ])\n\n                totalPlayers += shard.players\n                totalPlayingPlayers += shard.playingPlayers\n            }\n\n            const totalStatsEmbed = new EmbedBuilder()\n                .setColor(client.settings.color)\n                .addFields([\n                    {\n                        name: 'Total Stats',\n                        value: `\\`\\`\\`Total Servers: ${totalGuilds.toLocaleString()}\\nTotal Channels: ${totalChannels.toLocaleString()}\\nTotal Users: ${totalMembers.toLocaleString()}\\nTotal Memory: ${totalMemory.toFixed(2)}\\nMB Avg API Latency: ${avgLatency} ms\\nTotal Players: ${totalPlayingPlayers}/${totalPlayers}\\`\\`\\``,\n                    },\n                ])\n                .setTimestamp()\n\n            embeds.push(embed)\n            embeds.push(totalStatsEmbed)\n        }\n\n        for (const embedToSend of embeds)\n            try {\n                await interaction.channel?.send({ embeds: [embedToSend] })\n            } catch (error) {\n                logger.error(error)\n                Sentry.captureException(error)\n            }\n    }\n\n    async getMembersCount (client: Client) {\n        try {\n            const membersCount = await client.cluster.broadcastEval(c => c.guilds.cache.reduce((prev, guild) => prev + guild.memberCount, 0))\n            const totalMembers = membersCount.reduce((prev, guildCount) => prev + guildCount, 0)\n            return totalMembers\n        } catch (error) {\n            logger.error(error)\n            return 0\n        }\n    }\n\n    async getGuildsCount (client: Client) {\n        try {\n            const guildCount = await client.cluster.fetchClientValues('guilds.cache.size')\n            const totalGuilds = guildCount.reduce((prev: any, guildCount: any) => prev + guildCount, 0)\n            return totalGuilds\n        } catch (error) {\n            logger.error(error)\n            return 0\n        }\n    }\n\n    async shardInfo (client: Client) {\n        try {\n            const shardInfo = await client.cluster.broadcastEval((c) => ({\n                id: c.cluster.id,\n                status: c.cluster.client.user.presence.status,\n                guilds: c.guilds.cache.size,\n                channels: c.channels.cache.size,\n                members: c.guilds.cache.reduce(\n                    (prev, guild) => prev + guild.memberCount,\n                    0,\n                ),\n                memoryUsage: (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2),\n                players: c.music?.players?.size ?? 0,\n                playingPlayers: c.music?.players?.filter((p) => p.playing).size ?? 0,\n                ping: c.ws.ping,\n            }))\n            return shardInfo\n        } catch (error) {\n            logger.error(error)\n            return []\n        }\n    }\n};\n"]}