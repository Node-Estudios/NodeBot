{"version":3,"file":"ping.js","sourceRoot":"","sources":["../../../../src/slash/commands/InformaciÃ³n y Utilidad/ping.ts"],"names":[],"mappings":"AAAA,OAAO,EAA+B,MAAM,EAAE,MAAM,YAAY,CAAA;AAChE,OAAO,YAAY,MAAM,6BAA6B,CAAA;AACtD,OAAO,iBAAiB,MAAM,6BAA6B,CAAA;AAE3D,OAAO,OAAO,MAAM,wBAAwB,CAAA;AAC5C,OAAO,UAAU,EAAE,EAAE,IAAI,EAAE,MAAM,sBAAsB,CAAA;AAEvD,OAAO,MAAM,MAAM,kBAAkB,CAAA;AACrC,MAAM,CAAC,OAAO,OAAO,IAAK,SAAQ,OAAO;IACrC;QACI,KAAK,CAAC;YACF,IAAI,EAAE,MAAM;YACZ,WAAW,EAAE,wBAAwB;YACrC,QAAQ,EAAE,CAAC;SACd,CAAC,CAAA;IACN,CAAC;IAEQ,KAAK,CAAC,GAAG,CAAE,WAAwC;QACxD,MAAM,SAAS,GAAG,UAAU,CAAC,WAAW,CAAC,CAAA;QACzC,MAAM,MAAM,GAAG,WAAW,CAAC,MAAgB,CAAA;QAC3C,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAA;QAC5E,OAAO,MAAM,MAAM,CAAC,OAAO;aACtB,aAAa,CACV,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC;YACT,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI;SAClB,CAAC,EACF,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,EAAE,EAAE,CACjC;aACA,IAAI,CAAC,KAAK,EAAE,OAAY,EAAE,EAAE;YACzB,MAAM,WAAW,GAAG,iBAAiB,CAAC,GAAG,CAAC,cAAc,GAAG,WAAW,CAAC,EAAE,CAAC,CAAA;YAC1E,MAAM,IAAI,GAAG,WAAW,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;YACrC,IAAI,WAAW;gBACX,iBAAiB,CAAC,MAAM,CAAC,cAAc,GAAG,WAAW,CAAC,EAAE,CAAC,CAAA;YAG7D,OAAO,MAAM,WAAW;iBACnB,KAAK,CAAC;gBACH,MAAM,EAAE;oBACJ,IAAI,YAAY,EAAE;yBACb,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC;yBACtB,SAAS,CACN,EAAE,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,EAC1E,EAAE,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,IAAI,GAAG,IAAI,EAAE,EAC3D,EAAE,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,GAAG,IAAI,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAC1E;yBACA,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;yBAC9B,YAAY,EAAE;iBACtB;aACJ,CAAC;iBACD,IAAI,CAAC,GAAG,EAAE;gBACP,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAA;YAC3C,CAAC,CAAC,CAAA;QACV,CAAC,CAAC,CAAA;IACV,CAAC;CACJ","sourcesContent":["import { ChatInputCommandInteraction, Colors } from 'discord.js'\nimport EmbedBuilder from '#structures/EmbedBuilder.js'\nimport performanceMeters from '#cache/performanceMeters.js'\nimport Client from '#structures/Client.js'\nimport Command from '#structures/Command.js'\nimport Translator, { keys } from '#utils/Translator.js'\n\nimport logger from '#utils/logger.js'\nexport default class ping extends Command {\n    constructor () {\n        super({\n            name: 'ping',\n            description: 'Shows the bot latency.',\n            cooldown: 5,\n        })\n    }\n\n    override async run (interaction: ChatInputCommandInteraction) {\n        const translate = Translator(interaction)\n        const client = interaction.client as Client\n        const ping = Math.abs((interaction.createdAt.getTime() - Date.now()) / 1000)\n        return await client.cluster\n            .broadcastEval(\n                (c: any) => ({\n                    ping: c.ws.ping,\n                }),\n                { cluster: client.cluster.id },\n            )\n            .then(async (results: any) => {\n                const performance = performanceMeters.get('interaction_' + interaction.id)\n                const time = performance?.stop() ?? 0\n                if (performance)\n                    performanceMeters.delete('interaction_' + interaction.id)\n\n                // Todo: process.env.mode === 'development'\n                return await interaction\n                    .reply({\n                        embeds: [\n                            new EmbedBuilder()\n                                .setColor(Colors.Green)\n                                .setFields(\n                                    { name: translate(keys.API), value: `${results[0].ping}ms`, inline: true },\n                                    { name: translate(keys.ping.internal), value: time + 'ms' },\n                                    { name: translate(keys.ping.global), value: `${ping}ms`, inline: true },\n                                )\n                                .setTitle(translate(keys.PING))\n                                .setTimestamp(),\n                        ],\n                    })\n                    .then(() => {\n                        logger.debug('ping execution finished')\n                    })\n            })\n    }\n}\n"]}