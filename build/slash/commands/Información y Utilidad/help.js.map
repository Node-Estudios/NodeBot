{"version":3,"file":"help.js","sourceRoot":"","sources":["../../../../src/slash/commands/InformaciÃ³n y Utilidad/help.ts"],"names":[],"mappings":"AACA,OAAO,YAAY,MAAM,6BAA6B,CAAA;AAEtD,OAAO,OAAO,MAAM,wBAAwB,CAAA;AAC5C,OAAO,UAAU,EAAE,EAAE,IAAI,EAAE,MAAM,sBAAsB,CAAA;AAEvD,MAAM,CAAC,OAAO,OAAO,IAAK,SAAQ,OAAO;IACrC;QACI,KAAK,CAAC;YACF,IAAI,EAAE,MAAM;YACZ,WAAW,EAAE,4BAA4B;YACzC,QAAQ,EAAE,CAAC;SACd,CAAC,CAAA;IACN,CAAC;IAEQ,KAAK,CAAC,GAAG,CAAE,WAAwC;QACxD,MAAM,SAAS,GAAG,UAAU,CAAC,WAAW,CAAC,CAAA;QACzC,MAAM,MAAM,GAAG,WAAW,CAAC,MAAgB,CAAA;QAC3C,OAAO,MAAM,WAAW,CAAC,KAAK,CAAC;YAC3B,MAAM,EAAE;gBACJ,IAAI,YAAY,EAAE;qBACb,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;qBAC/B,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;qBACjD,SAAS,CAAC;oBACP,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;oBAClC,KAAK,EAAE,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,WAAW,CAAC,WAAW,KAAK;iBACnF,CAAC;qBACD,SAAS,CAAC;oBACP,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;oBACvC,KAAK,EAAE,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;wBAC5C,SAAS,EAAE,MAAM,CAAC,iBAAiB;qBACtC,CAAC;iBACL,CAAC;qBACD,SAAS,CAAC;oBACP,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;oBACnC,KAAK,EAAE,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC;iBAC9C,CAAC;qBACD,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;qBACjD,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC5C;SACJ,CAAC,CAAA;IAqDN,CAAC;CACJ","sourcesContent":["import { ChatInputCommandInteraction } from 'discord.js'\nimport EmbedBuilder from '#structures/EmbedBuilder.js'\nimport Client from '#structures/Client.js'\nimport Command from '#structures/Command.js'\nimport Translator, { keys } from '#utils/Translator.js'\n\nexport default class help extends Command {\n    constructor () {\n        super({\n            name: 'help',\n            description: 'Show information about me.',\n            cooldown: 5,\n        })\n    }\n\n    override async run (interaction: ChatInputCommandInteraction) {\n        const translate = Translator(interaction)\n        const client = interaction.client as Client\n        return await interaction.reply({\n            embeds: [\n                new EmbedBuilder()\n                    .setColor(client.settings.color)\n                    .setDescription(translate(keys.help.presentation))\n                    .addFields({\n                        name: translate(keys.help.how_use),\n                        value: `${translate(keys.help.how_use_answer)} \\`/${interaction.commandName}\\`.`,\n                    })\n                    .addFields({\n                        name: translate(keys.help.need_support),\n                        value: translate(keys.help.need_support_answer, {\n                            inviteURL: client.officialServerURL,\n                        }),\n                    })\n                    .addFields({\n                        name: translate(keys.help.how_vote),\n                        value: translate(keys.help.how_vote_answer),\n                    })\n                    .setThumbnail(interaction.user.displayAvatarURL())\n                    .setTitle(translate(keys.help.title)),\n            ],\n        })\n        // const command = commands.get(cmd)\n\n        //     if (!command) {\n        //         return interaction.reply({\n        //             embeds: [new EmbedBuilder()\n        //             .setColor('RED')\n        //             .setTitle(interaction.language.ERROREMBED)\n        //             .setDescription(name + interaction.language.HELP[25])\n        //             .setFooter(\n        //                 interaction.user.username + '#' + interaction.user.discriminator,\n        //                 interaction.user.displayAvatarURL(),\n        //             )],\n        //         })\n        //     }\n\n        //     data.push(`**${interaction.language.HELP[15]}:** ${command.name}`)\n\n        //     if (command.description) data.push(`**${interaction.language.HELP[17]}:** ${command.description}`)\n        //     let ajj\n        //     if (command.options)\n        //         data.push(\n        //             `**${interaction.language.HELP[18]}:** .${command.name} ${command.options\n        //                 .map((a: any) => {\n        //                     return (ajj = a.name ? a.name : null)\n        //                 })\n        //                 .join(' ')}`,\n        //         )\n\n        //     data.push(`**${interaction.language.HELP[19]}:** ${command.cooldown || 3} ${interaction.language.HELP[30]}(s)`)\n        //     let embed2 = new EmbedBuilder()\n        //         .setTitle(interaction.language.HELP[20] + command.name + interaction.language.HELP[24])\n        //         .setColor(process.env.bot1Embed_Color as ColorResolvable)\n        //         .addFields(\n        //             {\n        //                 name: `**${interaction.language.HELP[17]}**`,\n        //                 value: command.description ,\n        //                 inline: true,\n        //             },\n        //             {\n        //                 name: `**${interaction.language.HELP[18]}**`,\n        //                 value: ajj ? ajj : interaction.language.HELP[29],\n        //                 inline: true,\n        //             },\n        //         )\n        //         .setFooter(\n        //             `\\n${interaction.language.HELP[26]} \\`/${interaction.commandName} [${interaction.language.HELP[27]}]\\` ${interaction.language.HELP[28]}`,\n        //         )\n        //         .setTimestamp()\n\n        //     interaction.reply({\n        //         embeds: [embed2],\n        //     })\n    }\n}\n"]}