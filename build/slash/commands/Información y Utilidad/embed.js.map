{"version":3,"file":"embed.js","sourceRoot":"","sources":["../../../../src/slash/commands/InformaciÃ³n y Utilidad/embed.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    ApplicationCommandOptionType,\n    ChatInputCommandInteraction,\n    PermissionsBitField,\n    PermissionFlagsBits,\n    TextInputBuilder,\n    ActionRowBuilder,\n    TextInputStyle,\n    ModalBuilder,\n    ChannelType,\n    GuildMember,\n    Colors,\n} from 'discord.js'\nimport Translator, { keys } from '#utils/Translator.js'\nimport Command from '#structures/Command.js'\nimport Client from '#structures/Client.js'\nimport Color from '#structures/Color.js'\n\nexport default class embed extends Command {\n    constructor () {\n        super({\n            name: 'embed',\n            description: 'Sends a embed.',\n            cooldown: 5,\n            dm_permission: false,\n            permissions: {\n                botPermissions: new PermissionsBitField([\n                    PermissionsBitField.Flags.SendMessages,\n                    PermissionsBitField.Flags.EmbedLinks,\n                    PermissionsBitField.Flags.ViewChannel,\n                ]),\n            },\n            options: [\n                {\n                    type: ApplicationCommandOptionType.Channel,\n                    name: 'channel',\n                    channel_types: [ChannelType.GuildText],\n                    description: 'Channel where the embed will be sent.',\n                },\n                {\n                    type: ApplicationCommandOptionType.String,\n                    name: 'color',\n                    description: 'Color of the embed',\n                    autocomplete: true,\n                },\n                {\n                    type: ApplicationCommandOptionType.Attachment,\n                    name: 'image',\n                    description: 'Image of the embed in format png, jpg, jpeg, gif, webp, bmp, tiff, tif',\n                },\n            ],\n        })\n    }\n\n    override async run (interaction: ChatInputCommandInteraction) {\n        const translate = Translator(interaction)\n        const client = interaction.client as Client\n        if (!interaction.inCachedGuild())\n            return await interaction.reply({\n                content: translate(keys.GENERICERROR, {\n                    inviteURL: client.officialServerURL,\n                }),\n                ephemeral: true,\n            })\n\n        const channel = interaction.options.getChannel('channel', false, [ChannelType.GuildText]) ?? interaction.channel\n        if (!channel?.permissionsFor(interaction.guild.members.me as GuildMember).has([PermissionFlagsBits.SendMessages, PermissionFlagsBits.EmbedLinks]))\n            return await interaction.reply({\n                content: Translator(interaction)(keys.embed.missing_permissions, {\n                    permisions: new PermissionsBitField([PermissionFlagsBits.SendMessages, PermissionFlagsBits.EmbedLinks])\n                        .toArray()\n                        .map(p => p.replace(/([A-Z])/g, ' $&')?.trim())\n                        .join(', '),\n                }),\n                ephemeral: true,\n            })\n\n        const colorInput = interaction.options.getString('color')\n        let color = new Color(`${Colors.Default}`)\n        if (colorInput && Color.isColor(colorInput)) color = new Color(colorInput)\n        const immage = interaction.options.getAttachment('image')\n        console.log(immage?.url)\n        return await interaction.showModal(\n            new ModalBuilder()\n                .setCustomId('embed:n:' + channel.id)\n                .setTitle(translate(keys.embed.modal.title))\n                .setComponents(\n                    new ActionRowBuilder<TextInputBuilder>().setComponents(\n                        new TextInputBuilder()\n                            .setCustomId('title')\n                            .setPlaceholder(translate(keys.embed.modal.title_placeholder))\n                            .setLabel(translate(keys.embed.modal.title_label))\n                            .setMaxLength(256)\n                            .setStyle(TextInputStyle.Short)\n                            .setRequired(false),\n                    ),\n                    new ActionRowBuilder<TextInputBuilder>().setComponents(\n                        new TextInputBuilder()\n                            .setCustomId('description')\n                            .setPlaceholder(translate(keys.embed.modal.description_placeholder))\n                            .setLabel(translate(keys.embed.modal.description_label))\n                            .setStyle(TextInputStyle.Paragraph)\n                            .setRequired(false),\n                    ),\n                    new ActionRowBuilder<TextInputBuilder>().setComponents(\n                        new TextInputBuilder()\n                            .setCustomId('color')\n                            .setPlaceholder('#0F99A7')\n                            .setLabel(translate(keys.embed.modal.color_label))\n                            .setStyle(TextInputStyle.Short)\n                            .setRequired(true)\n                            .setValue(color.hex),\n                    ),\n                    new ActionRowBuilder<TextInputBuilder>().setComponents(\n                        new TextInputBuilder()\n                            .setCustomId('image')\n                            .setPlaceholder('https://imgur.com/Vicmk2N'),\n                    ),\n                ))\n    }\n}\n"]}