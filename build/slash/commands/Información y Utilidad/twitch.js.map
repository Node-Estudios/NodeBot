{"version":3,"file":"twitch.js","sourceRoot":"","sources":["../../../../src/slash/commands/Informaci√≥n y Utilidad/twitch.ts"],"names":[],"mappings":"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","sourcesContent":["import { ApplicationCommandOptionType, ChannelType, ChatInputCommandInteraction } from 'discord.js'\nimport TwitchModel from '#models/twitch.js'\nimport Client from '#structures/Client.js'\nimport Command from '#structures/Command.js'\nimport Translator, { keys } from '#utils/Translator.js'\nimport logger from '#utils/logger.js'\n\nconst headers = {\n    'Client-ID': process.env.TWITCH_CLIENT_ID,\n    Authorization: process.env.TWITCH_AUTHORIZATION,\n}\n\nexport default class Twitch extends Command {\n    constructor () {\n        super({\n            name: 'twitch',\n            description: 'Set a notification for when a streamer goes live',\n            cooldown: 5,\n            dm_permission: false,\n            options: [\n                {\n                    type: ApplicationCommandOptionType.Subcommand,\n                    name: 'add',\n                    description: 'Add a notification for when a streamer goes live',\n                    options: [\n                        {\n                            type: ApplicationCommandOptionType.String,\n                            name: 'streamer',\n                            description: 'Streamer to set the notification',\n                            required: true,\n                        },\n                        {\n                            type: ApplicationCommandOptionType.Channel,\n                            name: 'channel',\n                            description: 'Channel to send the notification',\n                            required: true,\n                            channel_types: [ChannelType.GuildText],\n                        },\n                        {\n                            type: ApplicationCommandOptionType.Role,\n                            name: 'role',\n                            description: 'Role to mention when the streamer goes live',\n                        },\n                    ],\n                },\n                {\n                    type: ApplicationCommandOptionType.Subcommand,\n                    name: 'remove',\n                    description: 'Remove a notification for when a streamer goes live',\n                    options: [\n                        {\n                            type: ApplicationCommandOptionType.String,\n                            name: 'streamer',\n                            description: 'Streamer to remove the notification',\n                            required: true,\n                        },\n                    ],\n                },\n            ],\n        })\n    }\n\n    override async run (interaction: ChatInputCommandInteraction) {\n        const option = interaction.options.getSubcommand()\n        if (option === 'add') this.add(interaction)\n        else if (option === 'remove') this.remove(interaction)\n    }\n\n    async add (interaction: ChatInputCommandInteraction) {\n        if (!interaction.inCachedGuild()) return\n        const translate = Translator(interaction)\n        const client = interaction.client as Client\n        const streamer = interaction.options.getString('streamer', true)\n        const channel = interaction.options.getChannel('channel', true, [ChannelType.GuildText])\n        const role = interaction.options.getRole('role')\n\n        const streamerReq = await fetch(`https://api.twitch.tv/helix/users?login=${streamer}`, { headers })\n        if (!streamerReq.ok) {\n            return await interaction.reply({\n                content: translate(keys.GENERICERROR, {\n                    inviteURL: client.officialServerURL,\n                }),\n                ephemeral: true,\n            })\n        }\n\n        const streamerData = await streamerReq.json() as { data: TwitchUser[] }\n        if (!streamerData.data[0]) {\n            return await interaction.reply({\n                content: translate(keys.twitch.no_streamer_found),\n                ephemeral: true,\n            })\n        }\n\n        const subreq = await fetch(`https://api.twitch.tv/helix/eventsub/subscriptions?id=${2}`, {\n            method: 'POST',\n            headers: {\n                ...headers,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                type: 'stream.online',\n                version: '1',\n                condition: {\n                    broadcaster_user_id: streamerData.data[0].id,\n                },\n                transport: {\n                    method: 'webhook',\n                    callback: 'https://api.nodebot.xyz/twitch/webhook',\n                    secret: process.env.TWITCH_WEBHOOK_SECRET,\n                },\n            }),\n        })\n        if (!subreq.ok) {\n            return await interaction.reply({\n                content: translate(keys.GENERICERROR, {\n                    inviteURL: client.officialServerURL,\n                }),\n                ephemeral: true,\n            })\n        }\n        const subData = await subreq.json() as {\n            data: TwitchSubscription[]\n            total: number\n            total_cost: number\n            max_total_cost: number\n        }\n        logger.info(`TWITCH: ${subData.total} subs creadas | ${subData.total_cost}/${subData.max_total_cost}`)\n\n        await TwitchModel.findOneAndUpdate({\n            streamerId: streamerData.data[0].id,\n            guildId: interaction.guild.id,\n        }, {\n            streamerId: streamerData.data[0].id,\n            guildId: interaction.guild.id,\n            channelId: channel.id,\n            roleId: role?.id,\n        }, {\n            upsert: true,\n        })\n\n        return await interaction.reply({\n            content: translate(keys.twitch.now_following, {\n                streamer: streamerData.data[0].display_name,\n                // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                channel: channel.toString(),\n            }) + (role\n                ? translate(keys.twitch.role_mention, {\n                    role: role.toString(),\n                })\n                : ''),\n        })\n    }\n\n    async remove (interaction: ChatInputCommandInteraction) {\n        if (!interaction.inCachedGuild()) return\n        const translate = Translator(interaction)\n        const client = interaction.client as Client\n        const streamer = interaction.options.getString('streamer', true)\n\n        const streamerReq = await fetch(`https://api.twitch.tv/helix/users?login=${streamer}`, { headers })\n        if (!streamerReq.ok) {\n            return await interaction.reply({\n                content: translate(keys.GENERICERROR, {\n                    inviteURL: client.officialServerURL,\n                }),\n                ephemeral: true,\n            })\n        }\n        const streamerData = await streamerReq.json() as { data: TwitchUser[] }\n        if (!streamerData.data[0]) {\n            return await interaction.reply({\n                content: translate(keys.twitch.no_streamer_found),\n                ephemeral: true,\n            })\n        }\n\n        await TwitchModel.findOneAndDelete({\n            streamerId: streamerData.data[0].id,\n            guildId: interaction.guild.id,\n        })\n\n        return await interaction.reply({\n            content: translate(keys.twitch.unfollowed, {\n                streamer: streamerData.data[0].display_name,\n            }),\n        })\n    }\n}\n\nexport interface TwitchUser {\n    id: string\n    login: string\n    display_name: string\n    type: string\n    broadcaster_type: string\n    description: string\n    profile_image_url: string\n    offline_image_url: string\n    view_count: number\n    email: string\n    created_at: string\n}\n\nexport interface TwitchSubscription {\n    id: string\n    status: string\n    type: string\n    version: string\n    condition: {\n        user_id: string\n    }\n    created_at: string\n    transport: {\n        method: string\n        callback: string\n    }\n    cost: number\n}\n"]}