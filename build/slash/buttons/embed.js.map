{"version":3,"file":"embed.js","sourceRoot":"","sources":["../../../src/slash/buttons/embed.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,uBAAuB,CAAA;AAE1C,OAAO,KAAK,MAAM,sBAAsB,CAAA;AACxC,OAAO,UAAU,EAAE,EAAE,IAAI,EAAE,MAAM,sBAAsB,CAAA;AAEvD,OAAO,EAAE,gBAAgB,EAAqB,YAAY,EAAe,gBAAgB,EAAE,cAAc,EAAE,MAAM,YAAY,CAAA;AAE7H,MAAM,CAAC,OAAO,OAAO,KAAM,SAAQ,MAAM;IACrC;QACI,KAAK,CAAC,mBAAmB,CAAC,CAAA;IAC9B,CAAC;IAEQ,KAAK,CAAC,GAAG,CAAE,WAA8B;QAC9C,MAAM,CAAC,EAAC,MAAM,CAAC,GAAG,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QACjD,IAAI,MAAM,KAAK,GAAG;YAAE,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QACvD,IAAI,MAAM,KAAK,GAAG;YAAE,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;IAC9D,CAAC;IAED,KAAK,CAAC,IAAI,CAAE,WAA8B;QACtC,MAAM,CAAC,EAAC,EAAE,SAAS,CAAC,GAAG,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QACtD,MAAM,SAAS,GAAG,UAAU,CAAC,WAAW,CAAC,CAAA;QACzC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;QACrD,OAAO,MAAM,WAAW,CAAC,SAAS,CAC9B,IAAI,YAAY,EAAE;aACb,WAAW,CAAC,UAAU,GAAG,SAAS,CAAC;aACnC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aAC3C,aAAa,CACV,IAAI,gBAAgB,EAAoB,CAAC,aAAa,CAClD,IAAI,gBAAgB,EAAE;aACjB,WAAW,CAAC,OAAO,CAAC;aACpB,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;aAC7D,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;aACjD,YAAY,CAAC,GAAG,CAAC;aACjB,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC;aAC9B,QAAQ,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE,CAAC;aAC3B,WAAW,CAAC,KAAK,CAAC,CAC1B,EACD,IAAI,gBAAgB,EAAoB,CAAC,aAAa,CAClD,IAAI,gBAAgB,EAAE;aACjB,WAAW,CAAC,aAAa,CAAC;aAC1B,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;aACnE,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;aACvD,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC;aAClC,QAAQ,CAAC,KAAK,CAAC,WAAW,IAAI,EAAE,CAAC;aACjC,WAAW,CAAC,KAAK,CAAC,CAC1B,EACD,IAAI,gBAAgB,EAAoB,CAAC,aAAa,CAClD,IAAI,gBAAgB,EAAE;aACjB,WAAW,CAAC,OAAO,CAAC;aACpB,cAAc,CAAC,SAAS,CAAC;aACzB,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;aACjD,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC;aAC9B,QAAQ,CAAC,IAAI,KAAK,CAAC,CAAC,OAAO,KAAK,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;aACzI,WAAW,CAAC,KAAK,CAAC,CAC1B,CACJ,CAAC,CAAA;IACd,CAAC;IAED,KAAK,CAAC,OAAO,CAAE,WAA8B;QACzC,MAAM,CAAC,EAAC,EAAE,SAAS,CAAC,GAAG,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QACtD,MAAM,SAAS,GAAG,UAAU,CAAC,WAAW,CAAC,CAAA;QACzC,MAAM,MAAM,GAAG,WAAW,CAAC,MAAgB,CAAA;QAC3C,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;QACrD,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAgB,CAAA;QACrE,OAAO,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC;aAC7B,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,MAAM,WAAW,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;aAC3G,KAAK,CAAC,KAAK,IAAI,EAAE,CAAC,MAAM,WAAW,CAAC,KAAK,CAAC;YACvC,OAAO,EAAE,SAAS,CAAC,IAAI,CAAC,YAAY,EAAE;gBAClC,SAAS,EAAE,MAAM,CAAC,iBAAiB;aACtC,CAAC;YACF,SAAS,EAAE,IAAI;SAClB,CAAC,CAAC,CAAA;IACX,CAAC;CACJ","sourcesContent":["import Button from '#structures/Button.js'\nimport Client from '#structures/Client.js'\nimport Color from '#structures/Color.js'\nimport Translator, { keys } from '#utils/Translator.js'\n\nimport { ActionRowBuilder, ButtonInteraction, ModalBuilder, TextChannel, TextInputBuilder, TextInputStyle } from 'discord.js'\n\nexport default class Embed extends Button {\n    constructor () {\n        super(/embed:(e)|(p):\\d*/)\n    }\n\n    override async run (interaction: ButtonInteraction): Promise<any> {\n        const [,option] = interaction.customId.split(':')\n        if (option === 'e') return await this.edit(interaction)\n        if (option === 'p') return await this.publish(interaction)\n    }\n\n    async edit (interaction: ButtonInteraction): Promise<any> {\n        const [,, channelId] = interaction.customId.split(':')\n        const translate = Translator(interaction)\n        const { data: embed } = interaction.message.embeds[0]\n        return await interaction.showModal(\n            new ModalBuilder()\n                .setCustomId('embed:e:' + channelId)\n                .setTitle(translate(keys.embed.modal.title))\n                .setComponents(\n                    new ActionRowBuilder<TextInputBuilder>().setComponents(\n                        new TextInputBuilder()\n                            .setCustomId('title')\n                            .setPlaceholder(translate(keys.embed.modal.title_placeholder))\n                            .setLabel(translate(keys.embed.modal.title_label))\n                            .setMaxLength(256)\n                            .setStyle(TextInputStyle.Short)\n                            .setValue(embed.title ?? '')\n                            .setRequired(false),\n                    ),\n                    new ActionRowBuilder<TextInputBuilder>().setComponents(\n                        new TextInputBuilder()\n                            .setCustomId('description')\n                            .setPlaceholder(translate(keys.embed.modal.description_placeholder))\n                            .setLabel(translate(keys.embed.modal.description_label))\n                            .setStyle(TextInputStyle.Paragraph)\n                            .setValue(embed.description ?? '')\n                            .setRequired(false),\n                    ),\n                    new ActionRowBuilder<TextInputBuilder>().setComponents(\n                        new TextInputBuilder()\n                            .setCustomId('color')\n                            .setPlaceholder('#0F99A7')\n                            .setLabel(translate(keys.embed.modal.color_label))\n                            .setStyle(TextInputStyle.Short)\n                            .setValue(new Color((typeof embed.color === 'number' ? `#${embed.color.toString(16).padStart(6, '0')}` : (embed.color ?? '#000000'))).hex)\n                            .setRequired(false),\n                    ),\n                ))\n    }\n\n    async publish (interaction: ButtonInteraction): Promise<any> {\n        const [,, channelId] = interaction.customId.split(':')\n        const translate = Translator(interaction)\n        const client = interaction.client as Client\n        const { data: embed } = interaction.message.embeds[0]\n        const channel = await client.channels.fetch(channelId) as TextChannel\n        channel?.send({ embeds: [embed] })\n            .then(async () => await interaction.reply({ content: translate(keys.embed.successfully), ephemeral: true }))\n            .catch(async () => await interaction.reply({\n                content: translate(keys.GENERICERROR, {\n                    inviteURL: client.officialServerURL,\n                }),\n                ephemeral: true,\n            }))\n    }\n}\n"]}