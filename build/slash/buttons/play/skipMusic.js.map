{"version":3,"file":"skipMusic.js","sourceRoot":"","sources":["../../../../src/slash/buttons/play/skipMusic.ts"],"names":[],"mappings":"AACA,OAAO,YAAY,MAAM,6BAA6B,CAAA;AACtD,OAAO,UAAU,EAAE,EAAE,IAAI,EAAE,MAAM,sBAAsB,CAAA;AAEvD,OAAO,MAAM,MAAM,uBAAuB,CAAA;AAC1C,OAAO,MAAM,MAAM,kBAAkB,CAAA;AAErC,MAAM,CAAC,OAAO,OAAO,IAAK,SAAQ,MAAM;IACpC;QACI,KAAK,CAAC,WAAW,CAAC,CAAA;IACtB,CAAC;IAEQ,KAAK,CAAC,GAAG,CAAE,WAA8B;QAC9C,IAAI,CAAC;YACD,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE;gBAAE,OAAM;YACxC,MAAM,MAAM,GAAG,WAAW,CAAC,MAAgB,CAAA;YAC3C,MAAM,SAAS,GAAG,UAAU,CAAC,WAAW,CAAC,CAAA;YACzC,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;YAE7D,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,OAAO;gBACtB,OAAO,MAAM,WAAW,CAAC,KAAK,CAAC;oBAC3B,MAAM,EAAE;wBACJ,IAAI,YAAY,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC;4BACzD,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;4BACpC,OAAO,EAAE,WAAW,CAAC,IAAI,CAAC,gBAAgB,EAAE;yBAC/C,CAAC;qBACL;iBACJ,CAAC,CAAA;YAEN,IAAI,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,CAAC;gBACrE,OAAO,MAAM,WAAW,CAAC,KAAK,CAAC;oBAC3B,MAAM,EAAE;wBACJ,IAAI,YAAY,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC;4BACzD,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;4BAClC,OAAO,EAAE,WAAW,CAAC,IAAI,CAAC,gBAAgB,EAAE;yBAC/C,CAAC;qBACL;iBACJ,CAAC,CAAA;YAEN,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO;gBAAE,OAAM;YACjC,IAAI,MAAM,CAAC,WAAW;gBAAE,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;YACpD,IAAI,MAAM,CAAC,WAAW;gBAAE,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;YAEpD,OAAO,MAAM,CAAC,IAAI,EAAE,CAAA;QACxB,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACT,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;QACnB,CAAC;IACL,CAAC;CACJ","sourcesContent":["import { ButtonInteraction } from 'discord.js'\nimport EmbedBuilder from '#structures/EmbedBuilder.js'\nimport Translator, { keys } from '#utils/Translator.js'\nimport Client from '#structures/Client.js'\nimport Button from '#structures/Button.js'\nimport logger from '#utils/logger.js'\n\nexport default class Skip extends Button {\n    constructor () {\n        super('nextMusic')\n    }\n\n    override async run (interaction: ButtonInteraction) {\n        try {\n            if (!interaction.inCachedGuild()) return\n            const client = interaction.client as Client\n            const translate = Translator(interaction)\n            const player = client.music.players.get(interaction.guild.id)\n\n            if (!player?.queue.current)\n                return await interaction.reply({\n                    embeds: [\n                        new EmbedBuilder().setColor(client.settings.color).setFooter({\n                            text: translate(keys.queue.no_queue),\n                            iconURL: interaction.user.displayAvatarURL(),\n                        }),\n                    ],\n                })\n\n            if (interaction.member.voice.channelId !== (player.voiceChannel.id ?? ''))\n                return await interaction.reply({\n                    embeds: [\n                        new EmbedBuilder().setColor(client.settings.color).setFooter({\n                            text: translate(keys.skip.no_same),\n                            iconURL: interaction.user.displayAvatarURL(),\n                        }),\n                    ],\n                })\n\n            if (!player.queue.current) return\n            if (player.trackRepeat) player.setTrackRepeat(false)\n            if (player.queueRepeat) player.setQueueRepeat(false)\n\n            return player.skip()\n        } catch (e) {\n            logger.error(e)\n        }\n    }\n}\n"]}