{"version":3,"file":"loopMusic.js","sourceRoot":"","sources":["../../../../src/slash/buttons/play/loopMusic.ts"],"names":[],"mappings":"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","sourcesContent":["import Translator, { keys } from '#utils/Translator.js'\nimport { APIMessageComponentEmoji, ButtonInteraction, ComponentType } from 'discord.js'\nimport EmbedBuilder from '#structures/EmbedBuilder.js'\nimport Client from '#structures/Client.js'\nimport Button from '#structures/Button.js'\nimport logger from '#utils/logger.js'\ntype Writeable<T extends { [x: string]: any }, K extends string> = {\n    [P in K]: T[P];\n}\nfunction getBlueRepeatEmoji (repeatMode: string, client: Client) {\n    if (repeatMode === 'queue')\n        return client.settings.emojis.blue.repeat_all\n    else if (repeatMode === 'track')\n        return client.settings.emojis.blue.repeat_one\n    else\n        return client.settings.emojis.white.repeat_off\n}\n\nexport default class Repeat extends Button {\n    constructor () {\n        super('repeatMusic')\n    }\n\n    override async run (interaction: ButtonInteraction) {\n        try {\n            if (!interaction.inCachedGuild()) return await interaction.deferUpdate()\n            const translate = Translator(interaction)\n            const client = interaction.client as Client\n            const player = client.music.players.get(interaction.guild.id)\n            if (!player?.queue.current)\n                return await interaction.reply({\n                    embeds: [\n                        new EmbedBuilder().setColor(client.settings.color).setFooter({\n                            text: translate(keys.queue.no_queue),\n                            iconURL: interaction.user.displayAvatarURL(),\n                        }),\n                    ],\n                })\n\n            if (interaction.member.voice.channelId !== (player.voiceChannel.id ?? ''))\n                return await interaction.reply({\n                    embeds: [\n                        new EmbedBuilder().setColor(client.settings.color).setFooter({\n                            text: translate(keys.skip.no_same),\n                            iconURL: interaction.user.displayAvatarURL(),\n                        }),\n                    ],\n                })\n\n            // Determine the queueRepeatMode based on currentTrackRepeat and currentQueueRepeat\n            let queueRepeatMode\n            if (player.trackRepeat && !player.queueRepeat) {\n                queueRepeatMode = 'off'\n                player.setQueueRepeat(false)\n                player.setTrackRepeat(false)\n            } else if (!player.trackRepeat && player.queueRepeat) {\n                queueRepeatMode = 'track'\n                player.setQueueRepeat(false)\n                player.setTrackRepeat(true)\n            } else {\n                queueRepeatMode = 'queue'\n                player.setQueueRepeat(true)\n                player.setTrackRepeat(false)\n            }\n\n            const blueRepeatEmoji = getBlueRepeatEmoji(queueRepeatMode, client)\n\n            const repeatButton = player.message?.components[0].components.find(\n                (c) => c.customId === 'repeatMusic' && c.type === ComponentType.Button,\n            )\n            if (repeatButton && repeatButton.type === ComponentType.Button)\n                 // @ts-expect-error\n                (repeatButton.data.emoji as Writeable<\n                APIMessageComponentEmoji,\n                keyof APIMessageComponentEmoji\n                >) = {\n                    name: blueRepeatEmoji.name.toString(),\n                    id: blueRepeatEmoji.id.toString(),\n                     // @ts-expect-error\n                    animated: repeatButton.data.emoji?.animated,\n                }\n\n            if (player.message)\n                await player.message.edit({ components: player.message.components, embeds: player.message.embeds })\n\n            await interaction.deferUpdate()\n        } catch (e) {\n            logger.error(e)\n        }\n        return true\n    }\n}\n"]}