{"version":3,"file":"commands.js","sourceRoot":"","sources":["../../src/handlers/commands.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAA;AAE1C,OAAO,MAAM,MAAM,kBAAkB,CAAA;AACrC,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAA;AAEhC,OAAO,aAAa,MAAM,yBAAyB,CAAA;AACnD,OAAO,QAAQ,MAAM,oBAAoB,CAAA;AACzC,OAAO,OAAO,MAAM,mBAAmB,CAAA;AACvC,OAAO,MAAM,MAAM,kBAAkB,CAAA;AAGrC,MAAM,SAAS,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC,CAAA;AAElF,MAAM,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC,CAAA;AAEhF,MAAM,SAAS,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC,CAAA;AAE5F,MAAM,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAA;AAG9E,KAAK,UAAU,SAAS,CAAE,KAAqC,EAAE,GAAW;IACxE,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAA;IAChF,KAAK,MAAM,IAAI,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;QACxE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;QAClE,IAAI,OAAO,IAAI,KAAK,UAAU;YAAE,SAAQ;QACxC,IAAI;YACA,MAAM,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAA;YAC3B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC;gBAAE,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;SACpE;QAAC,OAAO,KAAK,EAAE;YACZ,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAA;SAClD;KACJ;AACL,CAAC","sourcesContent":["import { readdir } from 'node:fs/promises'\nimport { Collection } from 'discord.js'\nimport logger from '#utils/logger.js'\nimport { join } from 'node:path'\n// caches\nimport autocompletes from '#cache/autocompletes.js'\nimport commands from '#cache/commands.js'\nimport buttons from '#cache/buttons.js'\nimport modals from '#cache/modals.js'\n\n// load commands\nawait loadCache(commands.cache, join(process.cwd(), 'build', 'slash', 'commands'))\n// load buttons\nawait loadCache(buttons.cache, join(process.cwd(), 'build', 'slash', 'buttons'))\n// load autocompletes\nawait loadCache(autocompletes.cache, join(process.cwd(), 'build', 'slash', 'autocompletes'))\n// load modals\nawait loadCache(modals.cache, join(process.cwd(), 'build', 'slash', 'modals'))\n\n// generic function to load cache\nasync function loadCache (cache: Collection<any, { name: any }>, dir: string) {\n    const files = await readdir(join(dir), { recursive: true, withFileTypes: true })\n    for (const file of files.filter(f => f.isFile() && f.name.endsWith('.js'))) {\n        const { default: File } = await import(join(file.path, file.name))\n        if (typeof File !== 'function') continue\n        try {\n            const instance = new File()\n            if (!cache.has(instance.name)) cache.set(instance.name, instance)\n        } catch (error) {\n            logger.error(join(file.path, file.name), error)\n        }\n    }\n}\n"]}