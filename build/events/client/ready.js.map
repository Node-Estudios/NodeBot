{"version":3,"file":"ready.js","sourceRoot":"","sources":["../../../src/events/client/ready.ts"],"names":[],"mappings":"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","sourcesContent":["import commands from '#cache/commands.js'\nimport Client from '#structures/Client.js'\nimport Command from '#structures/Command.js'\nimport logger from '#utils/logger.js'\nimport * as Sentry from '@sentry/node'\nimport { IPCMessage } from 'discord-hybrid-sharding'\nimport { ActivityType } from 'discord.js'\nimport { connect } from 'mongoose'\nimport { BaseEvent } from '../../structures/Events.js'\n\nexport default class Ready extends BaseEvent {\n    async run (client: Client): Promise<void> {\n        // console.log('client: \\n', client.cluster)\n        // ...\n\n        //* ADD DATABASE CONNECTION\n        if (process.env.MONGOURL)\n            connect(process.env.MONGOURL.toString(), {\n            // @ts-expect-error\n                useUnifiedTopology: true,\n                useNewUrlParser: true,\n            }).then(() => logger.db('Se ha conectado la base de datos correctamente.'))\n\n        // cluster\n        // client.cluster.triggerReady()\n        const arr: Command[] = []\n        for (const [,command] of commands.cache) arr.push(command)\n        if (process.env.TESTINGGUILD) {\n            const guild = await client.guilds.fetch(process.env.TESTINGGUILD)\n            guild.commands.set(arr).catch(logger.error)\n        } else if (!process.env.TESTINGUILD)\n            client.application?.commands.set(arr).catch(logger.error)\n\n        client.cluster.on('message', async (message2: any) => {\n            const message = (message2 as IPCMessage).raw\n            if (message.content === 'statistics')\n                try {\n                    // logger.debug(`Cluster's ${client.cluster.id} received statistics`)\n                    client.cluster\n                        .broadcastEval(\n                            c => ({\n                                guilds: c.guilds.cache.size,\n                                ping: c.ws.ping,\n                                channels: c.channels.cache.size,\n                                members: c.guilds.cache.reduce((prev, guild) => prev + guild.memberCount, 0),\n                                memoryUsage: (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2),\n                                players: c.music.players.size,\n                                playingPlayers: c.music.players.filter(p => p.playing).size,\n                            }),\n                            { cluster: client.cluster.id },\n                        )\n                        .then(results => {\n                            // console.log(results)\n                            message2.reply(results)\n                        })\n                } catch (e) {\n                    logger.error(e)\n                    if (client.services.sentry.loggedIn) {\n                        Sentry.captureException(e, scope => {\n                            scope.clear()\n                            scope.setContext('Statistics', {\n                                message,\n                                cluster: client.cluster.id,\n                            })\n                            return scope\n                        })\n                        logger.debug('Sentry error sent')\n                    }\n                    // * Status 500 is Internal Server Error\n                    message.reply({\n                        error: 'Statistics internal error, call the developer with the next id',\n                        status: 500,\n                    })\n                }\n        })\n        if (!process.env.TESTINGUILD)\n            setInterval(() => {\n                updateStatus()\n            }, 300000)\n\n        async function updateStatus () {\n            const promises = [\n                client.cluster.fetchClientValues('guilds.cache.size'),\n                // client.shard.broadcastEval((c) =>\n                //   c.guilds.cache.reduce((acc, guild) => acc + guild.memberCount, 0),\n                // ),\n                client.cluster.broadcastEval((c) => {\n                    return c.music?.players?.size ?? 0\n                }),\n            ]\n            Promise.all(promises)\n                .then((results) => {\n                    const guildNum = results[0].reduce(\n                        (acc: any, guildCount: any) => acc + guildCount,\n                        0,\n                    )\n                    // const memberNum = results[1].reduce(\n                    //   (acc, memberCount) => acc + memberCount,\n                    //   0\n                    // );\n                    const playersSize = results[1].reduce(\n                        (acc: any, playerCount: any) => acc + playerCount,\n                        0,\n                    )\n                    client.user.setActivity(\n                        `Servidores: ${guildNum}, Escuchando Música: ${playersSize}`,\n                        { type: ActivityType.Listening },\n                    )\n                })\n                .catch(logger.error)\n        }\n        logger.debug(`${client.user.username} ✅ | Cluster: ${client.cluster.id}`)\n    }\n}\n"]}