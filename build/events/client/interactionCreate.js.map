{"version":3,"file":"interactionCreate.js","sourceRoot":"","sources":["../../../src/events/client/interactionCreate.ts"],"names":[],"mappings":"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","sourcesContent":["import autocomplete from '#cache/autocompletes.js'\nimport buttons from '#cache/buttons.js'\nimport commands from '#cache/commands.js'\nimport cooldowns from '#cache/cooldowns.js'\nimport modals from '#cache/modals.js'\nimport performanceMeters from '#cache/performanceMeters.js'\nimport Client from '#structures/Client.js'\nimport logger from '#utils/logger.js'\nimport * as Sentry from '@sentry/node'\nimport {\n    AutocompleteInteraction,\n    ButtonInteraction,\n    ChatInputCommandInteraction,\n    Interaction,\n    ModalSubmitInteraction,\n} from 'discord.js'\nimport { PerformanceMeter } from '../../handlers/performanceMeter.js'\nimport { BaseEvent } from '../../structures/Events.js'\n\nexport class interactionCreate extends BaseEvent {\n    async run(client: Client, interaction: Interaction) {\n        if (process.env.TESTINGGUILD)\n            if (interaction.guild?.id !== process.env.TESTINGGUILD) return\n\n        if (interaction.member?.user.bot) return\n        // return false if something went wrong, true if everything was okey\n        if (client.settings.debug === 'true' && interaction.type !== 2)\n            logger.debug(\n                'Interaction, type: ' +\n                    interaction.type +\n                    ' | ' +\n                    interaction.guild?.name ??\n                    'No guild' + ' | ' + interaction.user.username,\n            )\n        if (!client.isReady()) return // <-- return statement here\n\n        if (interaction.isChatInputCommand())\n            return await this.processChatImputCommand(interaction)\n        else if (interaction.isButton())\n            return await this.processButtonInteraction(interaction)\n        else if (interaction.isAutocomplete())\n            return await this.processAutocompleteInteraction(interaction)\n        else if (interaction.isModalSubmit())\n            return await this.processModalSubmitInteraction(interaction)\n    }\n\n    async processChatImputCommand(interaction: ChatInputCommandInteraction) {\n        try {\n            performanceMeters.set(\n                'interaction_' + interaction.id,\n                new PerformanceMeter(),\n            )\n            performanceMeters.get('interaction_' + interaction.id)?.start()\n            const cmd = commands.cache.find(\n                c => c.name === interaction.commandName,\n            )\n            if (!cmd) return\n            if (interaction.guild && cmd?.only_dm) return // <-- return statement here\n            const transaction = Sentry.startTransaction({\n                op: cmd.name,\n                name: 'Executed /' + cmd.name,\n            })\n            Sentry.setContext('user', interaction.user)\n            Sentry.setContext('guild', interaction.guild)\n\n            logger.command(\n                `Comando ${cmd.name} ejecutado | ${interaction.user.username}`,\n            )\n\n            if (cmd.permissions) {\n                // Check if the command is only for devs\n                if (\n                    cmd.permissions.dev &&\n                    !(interaction.client as Client).devs.includes(\n                        interaction.user.id,\n                    )\n                )\n                    return await interaction.reply({\n                        content: 'Comando exclusivo para devs',\n                        ephemeral: true,\n                    })\n\n                // Check if the bot has the needed permissions to run the command\n                if (cmd.permissions.botPermissions) {\n                    const botMember = await interaction.guild?.members.fetchMe()\n                    const missingPermissions = botMember?.permissions.missing(\n                        cmd.permissions.botPermissions,\n                    )\n\n                    // If there are missing permissions, return an error message\n                    if (missingPermissions?.length)\n                        return await interaction.reply({\n                            content: `No tengo los permisos necesarios para ejecutar este comando, Permisos necesarios: **${missingPermissions.join(\n                                ', ',\n                            )}**`,\n                            ephemeral: true,\n                        })\n                }\n            }\n            if (\n                !cooldowns.canProced(\n                    interaction.user.id,\n                    interaction.commandName,\n                )\n            )\n                return await interaction.reply({\n                    content: `Debes esperar ${Math.round(\n                        cooldowns.leftTime(\n                            interaction.user.id,\n                            interaction.commandName,\n                        ) / 1000,\n                    )} segundos para volver a ejecutar este comando`,\n                })\n            return await cmd\n                .run(interaction)\n                .catch(e => {\n                    logger.error(e, '\\x1b[33mCommand Info\\x1b[0m', {\n                        cmd: cmd.name,\n                        options: JSON.stringify(\n                            interaction.options.data,\n                            (key, value) =>\n                                ![\n                                    'client',\n                                    'channel',\n                                    'guild',\n                                    'user',\n                                    'member',\n                                    'role',\n                                ].includes(key)\n                                    ? value\n                                    : undefined,\n                            4,\n                        ),\n                    })\n                })\n                .finally(() => {\n                    transaction.finish()\n                    cooldowns.registerInteraction(\n                        interaction.user.id,\n                        interaction.commandName,\n                    )\n                    performanceMeters\n                        .get('interaction_' + interaction.id)\n                        ?.stop()\n                    performanceMeters.delete('interaction_' + interaction.id)\n                })\n        } catch (e) {\n            return logger.error(e)\n        }\n    }\n\n    async processButtonInteraction(interaction: ButtonInteraction) {\n        logger.debug(\n            `Button ${interaction.customId} pressed | ${interaction.user.username}`,\n        )\n        await buttons.cache\n            .find(b => b.match(interaction.customId))\n            ?.run(interaction)\n            .catch(logger.error)\n    }\n\n    async processAutocompleteInteraction(interaction: AutocompleteInteraction) {\n        autocomplete.registerInteraction(interaction.user.id, interaction.id)\n        const respond = await autocomplete.cache\n            .find(b => b.match(interaction.commandName))\n            ?.run(interaction)\n            .catch(logger.error)\n        if (respond) autocomplete.removeInteraction(interaction.user.id)\n    }\n\n    async processModalSubmitInteraction(interaction: ModalSubmitInteraction) {\n        await modals.cache\n            .find(b => b.match(interaction.customId))\n            ?.run(interaction)\n            .catch(logger.error)\n    }\n}\n"]}