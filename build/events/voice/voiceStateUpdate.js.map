{"version":3,"file":"voiceStateUpdate.js","sourceRoot":"","sources":["../../../src/events/voice/voiceStateUpdate.ts"],"names":[],"mappings":"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","sourcesContent":["import Client from '#structures/Client.js'\nimport Translator, { keys } from '#utils/Translator.js'\nimport logger from '#utils/logger.js'\nimport { VoiceChannel, VoiceState } from 'discord.js'\nimport EmbedBuilder from '#structures/EmbedBuilder.js'\nimport { BaseEvent } from '../../structures/Events.js'\n\nexport default class VoiceStateUpdate extends BaseEvent {\n    async run (client: Client, oldState: VoiceState, newState: VoiceState): Promise<void> {\n        if (!client.music) return\n        const translate = Translator(newState.guild)\n        const player = client.music.players.get(oldState.guild.id)\n        if (!player) return\n\n        const newUserVoiceChannel = newState.guild.members.cache.get(client.user.id)?.voice.channel\n        const oldUserVoiceChannel = oldState.guild.members.cache.get(client.user.id)?.voice.channel\n\n        if (!newUserVoiceChannel || !oldUserVoiceChannel) {\n            await player.destroy()\n            return\n        }\n        const vc = player.voiceChannel\n        if (newUserVoiceChannel.id !== vc.id) return\n\n        // Check if there are more than 1 user in the voice channel, if not, pause the music\n        if (newUserVoiceChannel.members.filter(member => !member.user.bot).size >= 1) {\n            if (!player.waitingMessage && player.stayInVc)\n                player.pause(false)\n            else if (player.waitingMessage) {\n                await player.waitingMessage.delete()\n                delete player.waitingMessage\n                player.pause(false)\n            }\n            return\n        }\n\n        if (!player || player.waitingMessage) return\n\n        if (player.stayInVc) {\n            player.pause(true)\n            if (client.settings.debug === 'true')\n                logger.debug(\n                    'AutoPaused (24/7) | ' + player.guild.name + ' | ' + player.queue.current?.requester.displayName,\n                )\n        } else {\n            const embed = new EmbedBuilder()\n                .setDescription(\n                    translate(keys.voice_update.leaving, {\n                        channel: oldUserVoiceChannel.toString(),\n                        time: 300000 / 60 / 1000,\n                    }) + ' <:pepesad:967939851863343154>',\n                )\n                .setColor(client.settings.color)\n\n            player.waitingMessage = await (await player.getTextChannel())?.send({\n                embeds: [embed],\n            })\n\n            player.previouslyPaused = player.paused\n            player.pause(true)\n\n            if (client.settings.debug === 'true')\n                logger.debug('AutoPaused | ' + player.guild.name + ' | ' + player.queue.current?.requester.displayName)\n        }\n\n        // Delay for 5 minutes\n        await new Promise(resolve => setTimeout(resolve, 300000))\n\n        if (!player.waitingMessage || !newUserVoiceChannel)\n            return\n\n        const voiceMembers = newUserVoiceChannel.members.filter(member => !member.user.bot).size\n        if (!voiceMembers || voiceMembers < 1) {\n            const newPlayer = await client.music.createNewPlayer(\n                oldState.guild.members.cache.get(client.user.id)?.voice.channel as VoiceChannel,\n                player.textChannelId ?? '',\n                100,\n            )\n            await newPlayer?.connect()\n            await newPlayer?.destroy()\n\n            if (player.waitingMessage)\n                player.waitingMessage.edit({\n                    embeds: [\n                        new EmbedBuilder()\n                            .setDescription(\n                                translate(keys.voice_update.alone, {\n                                    channel: oldUserVoiceChannel.toString(),\n                                }) + ' <:pepeupset:967939535050772500>',\n                            )\n                            .setColor(client.settings.color),\n                    ],\n                })\n        }\n    }\n}\n"]}